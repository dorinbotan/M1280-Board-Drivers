
HWP_HandIn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000ee2  00000f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800222  00800222  00000f98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001961  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113c  00000000  00000000  00002a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  00003bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000799  00000000  00000000  00004960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d98  00000000  00000000  000050f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005e91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	3d c2       	rjmp	.+1146   	; 0x4cc <__vector_20>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__vector_23>
  5e:	00 00       	nop
  60:	69 c2       	rjmp	.+1234   	; 0x534 <__vector_24>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	94 c2       	rjmp	.+1320   	; 0x5c6 <__vector_39>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e2 ee       	ldi	r30, 0xE2	; 226
  f8:	fe e0       	ldi	r31, 0x0E	; 14
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a2 32       	cpi	r26, 0x22	; 34
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a2 e2       	ldi	r26, 0x22	; 34
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a3 33       	cpi	r26, 0x33	; 51
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	07 d2       	rcall	.+1038   	; 0x52a <main>
 11c:	e0 c6       	rjmp	.+3520   	; 0xede <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <_trigger>:
uint8_t current = 0;

void _trigger(uint8_t *dummy)
{
	// Display value
	CLEAR_BIT(PORTL, DISPLAY[current]);
 120:	ab e0       	ldi	r26, 0x0B	; 11
 122:	b1 e0       	ldi	r27, 0x01	; 1
 124:	3c 91       	ld	r19, X
 126:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__data_end>
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e2 5e       	subi	r30, 0xE2	; 226
 12e:	fd 4f       	sbci	r31, 0xFD	; 253
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	00 80       	ld	r0, Z
 138:	02 c0       	rjmp	.+4      	; 0x13e <_trigger+0x1e>
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <_trigger+0x1a>
 142:	24 2f       	mov	r18, r20
 144:	20 95       	com	r18
 146:	23 23       	and	r18, r19
 148:	2c 93       	st	X, r18
	CLOCK_PIN(PORTK, PK3);
 14a:	e8 e0       	ldi	r30, 0x08	; 8
 14c:	f1 e0       	ldi	r31, 0x01	; 1
 14e:	20 81       	ld	r18, Z
 150:	28 60       	ori	r18, 0x08	; 8
 152:	20 83       	st	Z, r18
 154:	20 81       	ld	r18, Z
 156:	27 7f       	andi	r18, 0xF7	; 247
 158:	20 83       	st	Z, r18
	SET_BIT(PORTL, current);
 15a:	2c 91       	ld	r18, X
 15c:	00 90 22 02 	lds	r0, 0x0222	; 0x800222 <__data_end>
 160:	02 c0       	rjmp	.+4      	; 0x166 <_trigger+0x46>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <_trigger+0x42>
 16a:	82 2b       	or	r24, r18
 16c:	8c 93       	st	X, r24
	current++;
 16e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 172:	8f 5f       	subi	r24, 0xFF	; 255
	current %= 4;
 174:	83 70       	andi	r24, 0x03	; 3
 176:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
 17a:	08 95       	ret

0000017c <__vector_23>:
}

ISR(TIMER0_OVF_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	0b b6       	in	r0, 0x3b	; 59
 188:	0f 92       	push	r0
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	cf 93       	push	r28
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	TCNT0 = 136;
 1a4:	88 e8       	ldi	r24, 0x88	; 136
 1a6:	86 bd       	out	0x26, r24	; 38
	uint8_t digit_value = value_by_digits[current];
 1a8:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__data_end>
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ea 5f       	subi	r30, 0xFA	; 250
 1b0:	fd 4f       	sbci	r31, 0xFD	; 253
 1b2:	c0 81       	ld	r28, Z
	if(digit_value != -1) {
		spi_init(SPI_MODE_MASTER,
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	e8 d1       	rcall	.+976    	; 0x58e <spi_init>
				 SPI_DATA_ORDER_LSB_FIRST,
				 SPI_CLOCK_POLARITY_LOW,
				 SPI_CLOCK_PHASE_LEADING);

		spi_send_byte(digit_value, _trigger);
 1be:	60 e9       	ldi	r22, 0x90	; 144
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	8c 2f       	mov	r24, r28
 1c4:	fa d1       	rcall	.+1012   	; 0x5ba <spi_send_byte>
	}
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	cf 91       	pop	r28
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0b be       	out	0x3b, r0	; 59
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <_init_7_segment>:

void _init_7_segment()
{
//	DDRB |= _BV(DDB3);
	DDRK |= _BV(DDK3);
 1ee:	e7 e0       	ldi	r30, 0x07	; 7
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	80 81       	ld	r24, Z
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	80 83       	st	Z, r24
	DDRL |= _BV(DDL3) | _BV(DDL2) | _BV(DDL1) | _BV(DDL0);
 1f8:	ea e0       	ldi	r30, 0x0A	; 10
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	80 81       	ld	r24, Z
 1fe:	8f 60       	ori	r24, 0x0F	; 15
 200:	80 83       	st	Z, r24

	PORTB |= _BV(PB3);
 202:	2b 9a       	sbi	0x05, 3	; 5

	TCNT0 = 136;							// 120 ticks
 204:	88 e8       	ldi	r24, 0x88	; 136
 206:	86 bd       	out	0x26, r24	; 38
	TCCR0B |= _BV(CS02);					// 256 prescaler (240 Hz)
 208:	85 b5       	in	r24, 0x25	; 37
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(TOIE0);					// Enable timer compare interrupt (8 bit)
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 214:	08 95       	ret

00000216 <display_7_segment>:
}

void display_7_segment(float value, uint8_t no_of_decimals)
{
 216:	2f 92       	push	r2
 218:	3f 92       	push	r3
 21a:	4f 92       	push	r4
 21c:	5f 92       	push	r5
 21e:	6f 92       	push	r6
 220:	7f 92       	push	r7
 222:	8f 92       	push	r8
 224:	9f 92       	push	r9
 226:	af 92       	push	r10
 228:	bf 92       	push	r11
 22a:	cf 92       	push	r12
 22c:	df 92       	push	r13
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	2e 97       	sbiw	r28, 0x0e	; 14
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	6b 01       	movw	r12, r22
 24c:	7c 01       	movw	r14, r24
 24e:	94 2e       	mov	r9, r20
	if(!init) {
 250:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <init>
 254:	81 11       	cpse	r24, r1
 256:	04 c0       	rjmp	.+8      	; 0x260 <display_7_segment+0x4a>
		init = 1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <init>
		_init_7_segment();
 25e:	c7 df       	rcall	.-114    	; 0x1ee <_init_7_segment>
	}

	// Math.pow gives wrong results
	uint16_t pow_ten[] = { 1, 10, 100, 1000, 10000 };
 260:	8a e0       	ldi	r24, 0x0A	; 10
 262:	ea e0       	ldi	r30, 0x0A	; 10
 264:	f2 e0       	ldi	r31, 0x02	; 2
 266:	de 01       	movw	r26, r28
 268:	11 96       	adiw	r26, 0x01	; 1
 26a:	01 90       	ld	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	8a 95       	dec	r24
 270:	e1 f7       	brne	.-8      	; 0x26a <display_7_segment+0x54>
	uint32_t real = value * pow_ten[no_of_decimals];
 272:	a9 2c       	mov	r10, r9
 274:	b1 2c       	mov	r11, r1
 276:	f5 01       	movw	r30, r10
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	8c 0f       	add	r24, r28
 282:	9d 1f       	adc	r25, r29
 284:	e8 0f       	add	r30, r24
 286:	f9 1f       	adc	r31, r25
 288:	80 81       	ld	r24, Z
 28a:	91 81       	ldd	r25, Z+1	; 0x01
 28c:	bc 01       	movw	r22, r24
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	c9 d3       	rcall	.+1938   	; 0xa26 <__floatunsisf>
 294:	a7 01       	movw	r20, r14
 296:	96 01       	movw	r18, r12
 298:	54 d4       	rcall	.+2216   	; 0xb42 <__mulsf3>
 29a:	99 d3       	rcall	.+1842   	; 0x9ce <__fixunssfsi>
 29c:	6b 87       	std	Y+11, r22	; 0x0b
 29e:	7c 87       	std	Y+12, r23	; 0x0c
 2a0:	8d 87       	std	Y+13, r24	; 0x0d
 2a2:	9e 87       	std	Y+14, r25	; 0x0e
 2a4:	fe 01       	movw	r30, r28
 2a6:	31 96       	adiw	r30, 0x01	; 1
 2a8:	7f 01       	movw	r14, r30
 2aa:	0f 2e       	mov	r0, r31
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	cf 2e       	mov	r12, r31
 2b0:	f2 e0       	ldi	r31, 0x02	; 2
 2b2:	df 2e       	mov	r13, r31
 2b4:	f0 2d       	mov	r31, r0

	for(int i = 0; i < 4; i++) {
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t digit = (real / pow_ten[i]) % 10;
 2ba:	0f 2e       	mov	r0, r31
 2bc:	fa e0       	ldi	r31, 0x0A	; 10
 2be:	4f 2e       	mov	r4, r31
 2c0:	51 2c       	mov	r5, r1
 2c2:	61 2c       	mov	r6, r1
 2c4:	71 2c       	mov	r7, r1
 2c6:	f0 2d       	mov	r31, r0
		value_by_digits[i] = DIGIT[digit] | (i == no_of_decimals && no_of_decimals);
 2c8:	81 2c       	mov	r8, r1
 2ca:	22 24       	eor	r2, r2
 2cc:	23 94       	inc	r2
 2ce:	31 2c       	mov	r3, r1
	// Math.pow gives wrong results
	uint16_t pow_ten[] = { 1, 10, 100, 1000, 10000 };
	uint32_t real = value * pow_ten[no_of_decimals];

	for(int i = 0; i < 4; i++) {
		uint8_t digit = (real / pow_ten[i]) % 10;
 2d0:	f7 01       	movw	r30, r14
 2d2:	21 91       	ld	r18, Z+
 2d4:	31 91       	ld	r19, Z+
 2d6:	7f 01       	movw	r14, r30
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	6b 85       	ldd	r22, Y+11	; 0x0b
 2de:	7c 85       	ldd	r23, Y+12	; 0x0c
 2e0:	8d 85       	ldd	r24, Y+13	; 0x0d
 2e2:	9e 85       	ldd	r25, Y+14	; 0x0e
 2e4:	91 d4       	rcall	.+2338   	; 0xc08 <__udivmodsi4>
 2e6:	ca 01       	movw	r24, r20
 2e8:	b9 01       	movw	r22, r18
 2ea:	a3 01       	movw	r20, r6
 2ec:	92 01       	movw	r18, r4
 2ee:	8c d4       	rcall	.+2328   	; 0xc08 <__udivmodsi4>
		value_by_digits[i] = DIGIT[digit] | (i == no_of_decimals && no_of_decimals);
 2f0:	e6 2f       	mov	r30, r22
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ec 5e       	subi	r30, 0xEC	; 236
 2f6:	fd 4f       	sbci	r31, 0xFD	; 253
 2f8:	20 81       	ld	r18, Z
 2fa:	0a 15       	cp	r16, r10
 2fc:	1b 05       	cpc	r17, r11
 2fe:	31 f4       	brne	.+12     	; 0x30c <display_7_segment+0xf6>
 300:	92 2d       	mov	r25, r2
 302:	91 10       	cpse	r9, r1
 304:	01 c0       	rjmp	.+2      	; 0x308 <display_7_segment+0xf2>
 306:	93 2d       	mov	r25, r3
 308:	89 2f       	mov	r24, r25
 30a:	01 c0       	rjmp	.+2      	; 0x30e <display_7_segment+0xf8>
 30c:	88 2d       	mov	r24, r8
 30e:	82 2b       	or	r24, r18
 310:	f6 01       	movw	r30, r12
 312:	81 93       	st	Z+, r24
 314:	6f 01       	movw	r12, r30

	// Math.pow gives wrong results
	uint16_t pow_ten[] = { 1, 10, 100, 1000, 10000 };
	uint32_t real = value * pow_ten[no_of_decimals];

	for(int i = 0; i < 4; i++) {
 316:	0f 5f       	subi	r16, 0xFF	; 255
 318:	1f 4f       	sbci	r17, 0xFF	; 255
 31a:	04 30       	cpi	r16, 0x04	; 4
 31c:	11 05       	cpc	r17, r1
 31e:	c1 f6       	brne	.-80     	; 0x2d0 <display_7_segment+0xba>
		uint8_t digit = (real / pow_ten[i]) % 10;
		value_by_digits[i] = DIGIT[digit] | (i == no_of_decimals && no_of_decimals);
	}
 320:	2e 96       	adiw	r28, 0x0e	; 14
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	bf 90       	pop	r11
 33e:	af 90       	pop	r10
 340:	9f 90       	pop	r9
 342:	8f 90       	pop	r8
 344:	7f 90       	pop	r7
 346:	6f 90       	pop	r6
 348:	5f 90       	pop	r5
 34a:	4f 90       	pop	r4
 34c:	3f 90       	pop	r3
 34e:	2f 90       	pop	r2
 350:	08 95       	ret

00000352 <_toBcd>:
		callback(0);
	} else {
		uint8_t data[3] = { _toBcd(d), _toBcd(m), _toBcd(y) };
		twi_write(DEVICE_ID, 0x04, data, 3, callback);
	}
}
 352:	9d ec       	ldi	r25, 0xCD	; 205
 354:	89 9f       	mul	r24, r25
 356:	91 2d       	mov	r25, r1
 358:	11 24       	eor	r1, r1
 35a:	96 95       	lsr	r25
 35c:	96 95       	lsr	r25
 35e:	96 95       	lsr	r25
 360:	39 2f       	mov	r19, r25
 362:	33 0f       	add	r19, r19
 364:	23 2f       	mov	r18, r19
 366:	22 0f       	add	r18, r18
 368:	22 0f       	add	r18, r18
 36a:	23 0f       	add	r18, r19
 36c:	82 1b       	sub	r24, r18
 36e:	20 e1       	ldi	r18, 0x10	; 16
 370:	92 9f       	mul	r25, r18
 372:	80 0d       	add	r24, r0
 374:	11 24       	eor	r1, r1
 376:	08 95       	ret

00000378 <rtc_init>:
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	1f 92       	push	r1
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	8c 01       	movw	r16, r24
 388:	60 ea       	ldi	r22, 0xA0	; 160
 38a:	76 e8       	ldi	r23, 0x86	; 134
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	eb d1       	rcall	.+982    	; 0x768 <twi_init>
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	89 83       	std	Y+1, r24	; 0x01
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	ae 01       	movw	r20, r28
 39c:	4f 5f       	subi	r20, 0xFF	; 255
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	6e e0       	ldi	r22, 0x0E	; 14
 3a2:	88 e6       	ldi	r24, 0x68	; 104
 3a4:	02 d2       	rcall	.+1028   	; 0x7aa <twi_write>
 3a6:	0f 90       	pop	r0
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	08 95       	ret

000003b2 <rtc_setTime>:
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	00 d0       	rcall	.+0      	; 0x3c0 <rtc_setTime+0xe>
 3c0:	1f 92       	push	r1
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	e8 2e       	mov	r14, r24
 3c8:	f6 2e       	mov	r15, r22
 3ca:	89 01       	movw	r16, r18
 3cc:	4c 33       	cpi	r20, 0x3C	; 60
 3ce:	30 f4       	brcc	.+12     	; 0x3dc <rtc_setTime+0x2a>
 3d0:	8b e3       	ldi	r24, 0x3B	; 59
 3d2:	86 17       	cp	r24, r22
 3d4:	18 f0       	brcs	.+6      	; 0x3dc <rtc_setTime+0x2a>
 3d6:	e7 e1       	ldi	r30, 0x17	; 23
 3d8:	ee 15       	cp	r30, r14
 3da:	28 f4       	brcc	.+10     	; 0x3e6 <rtc_setTime+0x34>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	f8 01       	movw	r30, r16
 3e2:	09 95       	icall
 3e4:	11 c0       	rjmp	.+34     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e6:	84 2f       	mov	r24, r20
 3e8:	b4 df       	rcall	.-152    	; 0x352 <_toBcd>
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	8f 2d       	mov	r24, r15
 3ee:	b1 df       	rcall	.-158    	; 0x352 <_toBcd>
 3f0:	8a 83       	std	Y+2, r24	; 0x02
 3f2:	8e 2d       	mov	r24, r14
 3f4:	ae df       	rcall	.-164    	; 0x352 <_toBcd>
 3f6:	8b 83       	std	Y+3, r24	; 0x03
 3f8:	23 e0       	ldi	r18, 0x03	; 3
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	ae 01       	movw	r20, r28
 3fe:	4f 5f       	subi	r20, 0xFF	; 255
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	88 e6       	ldi	r24, 0x68	; 104
 406:	d1 d1       	rcall	.+930    	; 0x7aa <twi_write>
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	08 95       	ret

0000041c <rtc_getTime>:

void rtc_getTime(void (*callback)(uint8_t *))
{
	twi_read(DEVICE_ID, 0x00, 3, callback);
 41c:	9c 01       	movw	r18, r24
 41e:	43 e0       	ldi	r20, 0x03	; 3
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	88 e6       	ldi	r24, 0x68	; 104
 426:	df c1       	rjmp	.+958    	; 0x7e6 <twi_read>
 428:	08 95       	ret

0000042a <_timer_setup>:
	TCNT1 = 51136;
}

void _timer_setup(uint8_t *dummy)
{
	TCNT1 = 51136;						// 14400 ticks (2 Hz)
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	97 ec       	ldi	r25, 0xC7	; 199
 42e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 432:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B |= _BV(CS12);				// 256 prescaler
 436:	e1 e8       	ldi	r30, 0x81	; 129
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	84 60       	ori	r24, 0x04	; 4
 43e:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);				// enable overflow interrupt (16 bit)
 440:	ef e6       	ldi	r30, 0x6F	; 111
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	81 60       	ori	r24, 0x01	; 1
 448:	80 83       	st	Z, r24
 44a:	08 95       	ret

0000044c <_display_value>:
#include <avr/interrupt.h>
#include "display.h"
#include "DS1337.h"

void _display_value(uint8_t *value)
{
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	cf 93       	push	r28
	// From BCD
	uint8_t second = (value[0] >> 4) * 10 + (value[0] & 0x0F);
 456:	fc 01       	movw	r30, r24
 458:	c0 81       	ld	r28, Z
	uint8_t minute = (value[1] >> 4) * 10 + (value[1] & 0x0F);
 45a:	81 81       	ldd	r24, Z+1	; 0x01
 45c:	68 2f       	mov	r22, r24
 45e:	62 95       	swap	r22
 460:	6f 70       	andi	r22, 0x0F	; 15
 462:	66 0f       	add	r22, r22
 464:	96 2f       	mov	r25, r22
 466:	99 0f       	add	r25, r25
 468:	99 0f       	add	r25, r25
 46a:	69 0f       	add	r22, r25
 46c:	8f 70       	andi	r24, 0x0F	; 15
 46e:	68 0f       	add	r22, r24
	float toDisplay = minute + (float)second / 100;
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	d9 d2       	rcall	.+1458   	; 0xa2a <__floatsisf>
 478:	6b 01       	movw	r12, r22
 47a:	7c 01       	movw	r14, r24
#include "DS1337.h"

void _display_value(uint8_t *value)
{
	// From BCD
	uint8_t second = (value[0] >> 4) * 10 + (value[0] & 0x0F);
 47c:	8c 2f       	mov	r24, r28
 47e:	82 95       	swap	r24
 480:	8f 70       	andi	r24, 0x0F	; 15
 482:	88 0f       	add	r24, r24
 484:	98 2f       	mov	r25, r24
 486:	99 0f       	add	r25, r25
 488:	99 0f       	add	r25, r25
 48a:	89 0f       	add	r24, r25
 48c:	cf 70       	andi	r28, 0x0F	; 15
 48e:	8c 0f       	add	r24, r28
	uint8_t minute = (value[1] >> 4) * 10 + (value[1] & 0x0F);
	float toDisplay = minute + (float)second / 100;
 490:	68 2f       	mov	r22, r24
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	c6 d2       	rcall	.+1420   	; 0xa26 <__floatunsisf>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	48 ec       	ldi	r20, 0xC8	; 200
 4a0:	52 e4       	ldi	r21, 0x42	; 66
 4a2:	2d d2       	rcall	.+1114   	; 0x8fe <__divsf3>
 4a4:	9b 01       	movw	r18, r22
 4a6:	ac 01       	movw	r20, r24
 4a8:	c7 01       	movw	r24, r14
 4aa:	b6 01       	movw	r22, r12
 4ac:	c4 d1       	rcall	.+904    	; 0x836 <__addsf3>

	display_7_segment(toDisplay, 2);
 4ae:	42 e0       	ldi	r20, 0x02	; 2
 4b0:	b2 de       	rcall	.-668    	; 0x216 <display_7_segment>
}
 4b2:	cf 91       	pop	r28
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	08 95       	ret

000004be <_set_time>:
	TIMSK1 |= _BV(TOIE1);				// enable overflow interrupt (16 bit)
}

void _set_time(uint8_t *dummy)
{
	rtc_setTime(0, 0, 0, _timer_setup);
 4be:	25 e1       	ldi	r18, 0x15	; 21
 4c0:	32 e0       	ldi	r19, 0x02	; 2
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	74 cf       	rjmp	.-280    	; 0x3b2 <rtc_setTime>
 4ca:	08 95       	ret

000004cc <__vector_20>:

	display_7_segment(toDisplay, 2);
}

ISR(TIMER1_OVF_vect)
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	0b b6       	in	r0, 0x3b	; 59
 4d8:	0f 92       	push	r0
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
	rtc_getTime(_display_value);
 4f2:	86 e2       	ldi	r24, 0x26	; 38
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	92 df       	rcall	.-220    	; 0x41c <rtc_getTime>
	TCNT1 = 51136;
 4f8:	80 ec       	ldi	r24, 0xC0	; 192
 4fa:	97 ec       	ldi	r25, 0xC7	; 199
 4fc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 500:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 504:	ff 91       	pop	r31
 506:	ef 91       	pop	r30
 508:	bf 91       	pop	r27
 50a:	af 91       	pop	r26
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	7f 91       	pop	r23
 512:	6f 91       	pop	r22
 514:	5f 91       	pop	r21
 516:	4f 91       	pop	r20
 518:	3f 91       	pop	r19
 51a:	2f 91       	pop	r18
 51c:	0f 90       	pop	r0
 51e:	0b be       	out	0x3b, r0	; 59
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <main>:
	rtc_setTime(0, 0, 0, _timer_setup);
}

int main(void)
{
	sei();
 52a:	78 94       	sei

	rtc_init(_set_time);
 52c:	8f e5       	ldi	r24, 0x5F	; 95
 52e:	92 e0       	ldi	r25, 0x02	; 2
 530:	23 df       	rcall	.-442    	; 0x378 <rtc_init>
	
    while (1);
 532:	ff cf       	rjmp	.-2      	; 0x532 <main+0x8>

00000534 <__vector_24>:
#include <avr/interrupt.h>

void (*callbackFunction)(uint8_t*);

ISR(SPI_STC_vect)
{
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	0b b6       	in	r0, 0x3b	; 59
 540:	0f 92       	push	r0
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
	callbackFunction(SPDR);
 55a:	8e b5       	in	r24, 0x2e	; 46
 55c:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <callbackFunction>
 560:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <callbackFunction+0x1>
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	09 95       	icall
}
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	7f 91       	pop	r23
 576:	6f 91       	pop	r22
 578:	5f 91       	pop	r21
 57a:	4f 91       	pop	r20
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	0f 90       	pop	r0
 582:	0b be       	out	0x3b, r0	; 59
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <spi_init>:
			  uint8_t mode,
			  uint8_t polarity,
			  uint8_t phase)
{
	//			MOSI		 SCK		  SS
	DDRB |= _BV(PINB2) | _BV(PINB1) | _BV(PINB0);
 58e:	94 b1       	in	r25, 0x04	; 4
 590:	97 60       	ori	r25, 0x07	; 7
 592:	94 b9       	out	0x04, r25	; 4
			_BV(SPIE) |
			_BV(SPE) |
			(data_order << DORD) |
			(mode << MSTR) |
			(polarity << CPOL) |
			(phase << CPHA) |
 594:	22 0f       	add	r18, r18
 596:	22 0f       	add	r18, r18
 598:	23 6c       	ori	r18, 0xC3	; 195
	SPCR = (
			_BV(SPIE) |
			_BV(SPE) |
			(data_order << DORD) |
			(mode << MSTR) |
			(polarity << CPOL) |
 59a:	44 0f       	add	r20, r20
 59c:	44 0f       	add	r20, r20
 59e:	44 0f       	add	r20, r20
 5a0:	42 2b       	or	r20, r18

	SPCR = (
			_BV(SPIE) |
			_BV(SPE) |
			(data_order << DORD) |
			(mode << MSTR) |
 5a2:	20 e1       	ldi	r18, 0x10	; 16
 5a4:	62 9f       	mul	r22, r18
 5a6:	b0 01       	movw	r22, r0
 5a8:	11 24       	eor	r1, r1
 5aa:	64 2b       	or	r22, r20
	DDRB |= _BV(PINB2) | _BV(PINB1) | _BV(PINB0);

	SPCR = (
			_BV(SPIE) |
			_BV(SPE) |
			(data_order << DORD) |
 5ac:	20 e2       	ldi	r18, 0x20	; 32
 5ae:	82 9f       	mul	r24, r18
 5b0:	c0 01       	movw	r24, r0
 5b2:	11 24       	eor	r1, r1
			  uint8_t phase)
{
	//			MOSI		 SCK		  SS
	DDRB |= _BV(PINB2) | _BV(PINB1) | _BV(PINB0);

	SPCR = (
 5b4:	68 2b       	or	r22, r24
 5b6:	6c bd       	out	0x2c, r22	; 44
 5b8:	08 95       	ret

000005ba <spi_send_byte>:
		   );
}

void spi_send_byte(uint8_t value, void (*callback)(uint8_t*))
{
	callbackFunction = callback;
 5ba:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <callbackFunction+0x1>
 5be:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <callbackFunction>
	SPDR = value;
 5c2:	8e bd       	out	0x2e, r24	; 46
 5c4:	08 95       	ret

000005c6 <__vector_39>:
volatile int TXIndex;
int TXSize;
void (*callbackFunction)(uint8_t*);

ISR(TWI_vect)
{
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	0b b6       	in	r0, 0x3b	; 59
 5d2:	0f 92       	push	r0
 5d4:	2f 93       	push	r18
 5d6:	3f 93       	push	r19
 5d8:	4f 93       	push	r20
 5da:	5f 93       	push	r21
 5dc:	6f 93       	push	r22
 5de:	7f 93       	push	r23
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	ef 93       	push	r30
 5ea:	ff 93       	push	r31
	switch(TW_STATUS)
 5ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5f0:	88 7f       	andi	r24, 0xF8	; 248
 5f2:	88 31       	cpi	r24, 0x18	; 24
 5f4:	09 f1       	breq	.+66     	; 0x638 <__vector_39+0x72>
 5f6:	28 f4       	brcc	.+10     	; 0x602 <__vector_39+0x3c>
 5f8:	88 30       	cpi	r24, 0x08	; 8
 5fa:	61 f0       	breq	.+24     	; 0x614 <__vector_39+0x4e>
 5fc:	80 31       	cpi	r24, 0x10	; 16
 5fe:	99 f0       	breq	.+38     	; 0x626 <__vector_39+0x60>
 600:	a0 c0       	rjmp	.+320    	; 0x742 <__vector_39+0x17c>
 602:	80 34       	cpi	r24, 0x40	; 64
 604:	09 f1       	breq	.+66     	; 0x648 <__vector_39+0x82>
 606:	80 35       	cpi	r24, 0x50	; 80
 608:	09 f4       	brne	.+2      	; 0x60c <__vector_39+0x46>
 60a:	5c c0       	rjmp	.+184    	; 0x6c4 <__vector_39+0xfe>
 60c:	88 32       	cpi	r24, 0x28	; 40
 60e:	09 f0       	breq	.+2      	; 0x612 <__vector_39+0x4c>
 610:	98 c0       	rjmp	.+304    	; 0x742 <__vector_39+0x17c>
 612:	1e c0       	rjmp	.+60     	; 0x650 <__vector_39+0x8a>
	{
		case TW_START:
			//usart0_send_arr("S", 1);
			TWDR = (deviceId << 1);
 614:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <deviceId>
 618:	88 0f       	add	r24, r24
 61a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWI_SendTransmit();
 61e:	85 e8       	ldi	r24, 0x85	; 133
 620:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 624:	8e c0       	rjmp	.+284    	; 0x742 <__vector_39+0x17c>
		case TW_REP_START:
			//usart0_send_arr("2", 1);
			TWDR = (deviceId << 1) | 0x01;
 626:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <deviceId>
 62a:	88 0f       	add	r24, r24
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWI_SendTransmit();
 632:	85 e8       	ldi	r24, 0x85	; 133
 634:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		case TW_MT_SLA_ACK:
			//usart0_send_arr("3", 1);
			TWDR = reg;
 638:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <reg>
 63c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWI_SendTransmit();
 640:	85 e8       	ldi	r24, 0x85	; 133
 642:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 646:	7d c0       	rjmp	.+250    	; 0x742 <__vector_39+0x17c>
		case TW_MR_SLA_ACK:
			//usart0_send_arr("4", 1);
			TWI_SendACK();
 648:	85 ec       	ldi	r24, 0xC5	; 197
 64a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 64e:	79 c0       	rjmp	.+242    	; 0x742 <__vector_39+0x17c>
		case TW_MT_DATA_ACK:
			//usart0_send_arr("5", 1);
			if(mode == Sending)	{
 650:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <mode>
 654:	81 11       	cpse	r24, r1
 656:	32 c0       	rjmp	.+100    	; 0x6bc <__vector_39+0xf6>
				if(TXIndex < TXSize) {
 658:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <TXIndex>
 65c:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <TXIndex+0x1>
 660:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <TXSize>
 664:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <TXSize+0x1>
 668:	28 17       	cp	r18, r24
 66a:	39 07       	cpc	r19, r25
 66c:	cc f4       	brge	.+50     	; 0x6a0 <__vector_39+0xda>
					TWDR = TXBuffer[TXIndex++];
 66e:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <TXBuffer>
 672:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <TXBuffer+0x1>
 676:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TXIndex>
 67a:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <TXIndex+0x1>
 67e:	ac 01       	movw	r20, r24
 680:	4f 5f       	subi	r20, 0xFF	; 255
 682:	5f 4f       	sbci	r21, 0xFF	; 255
 684:	50 93 28 02 	sts	0x0228, r21	; 0x800228 <TXIndex+0x1>
 688:	40 93 27 02 	sts	0x0227, r20	; 0x800227 <TXIndex>
 68c:	f9 01       	movw	r30, r18
 68e:	e8 0f       	add	r30, r24
 690:	f9 1f       	adc	r31, r25
 692:	80 81       	ld	r24, Z
 694:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
					TWI_SendTransmit();
 698:	85 e8       	ldi	r24, 0x85	; 133
 69a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 69e:	51 c0       	rjmp	.+162    	; 0x742 <__vector_39+0x17c>
				} else {
					TWI_SendStop();
 6a0:	85 e9       	ldi	r24, 0x95	; 149
 6a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					if(callbackFunction)
 6a6:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <callbackFunction>
 6aa:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <callbackFunction+0x1>
 6ae:	30 97       	sbiw	r30, 0x00	; 0
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <__vector_39+0xee>
 6b2:	47 c0       	rjmp	.+142    	; 0x742 <__vector_39+0x17c>
						callbackFunction(0);
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	09 95       	icall
 6ba:	43 c0       	rjmp	.+134    	; 0x742 <__vector_39+0x17c>
				}
			} else {
				TWI_SendStart();
 6bc:	85 ea       	ldi	r24, 0xA5	; 165
 6be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6c2:	3f c0       	rjmp	.+126    	; 0x742 <__vector_39+0x17c>
			}
			break;
		case TW_MR_DATA_ACK:
			//usart0_send_arr("6", 1);
			TXBuffer[TXIndex++] = TWDR;
 6c4:	40 91 2b 02 	lds	r20, 0x022B	; 0x80022b <TXBuffer>
 6c8:	50 91 2c 02 	lds	r21, 0x022C	; 0x80022c <TXBuffer+0x1>
 6cc:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <TXIndex>
 6d0:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <TXIndex+0x1>
 6d4:	9c 01       	movw	r18, r24
 6d6:	2f 5f       	subi	r18, 0xFF	; 255
 6d8:	3f 4f       	sbci	r19, 0xFF	; 255
 6da:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <TXIndex+0x1>
 6de:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <TXIndex>
 6e2:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 6e6:	fa 01       	movw	r30, r20
 6e8:	e8 0f       	add	r30, r24
 6ea:	f9 1f       	adc	r31, r25
 6ec:	20 83       	st	Z, r18
			if(TXIndex < TXSize) {
 6ee:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <TXIndex>
 6f2:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <TXIndex+0x1>
 6f6:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <TXSize>
 6fa:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <TXSize+0x1>
 6fe:	28 17       	cp	r18, r24
 700:	39 07       	cpc	r19, r25
 702:	24 f4       	brge	.+8      	; 0x70c <__vector_39+0x146>
				TWI_SendACK();
 704:	85 ec       	ldi	r24, 0xC5	; 197
 706:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 70a:	1b c0       	rjmp	.+54     	; 0x742 <__vector_39+0x17c>
			} else {
				TWI_SendNACK();
 70c:	85 e8       	ldi	r24, 0x85	; 133
 70e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				while((TWCR & (1 << TWINT)) == 0);
 712:	ec eb       	ldi	r30, 0xBC	; 188
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	88 23       	and	r24, r24
 71a:	ec f7       	brge	.-6      	; 0x716 <__vector_39+0x150>
				TWI_SendStop();
 71c:	85 e9       	ldi	r24, 0x95	; 149
 71e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				if(callbackFunction)
 722:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <callbackFunction>
 726:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <callbackFunction+0x1>
 72a:	30 97       	sbiw	r30, 0x00	; 0
 72c:	29 f0       	breq	.+10     	; 0x738 <__vector_39+0x172>
					callbackFunction(TXBuffer);
 72e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <TXBuffer>
 732:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <TXBuffer+0x1>
 736:	09 95       	icall
				free(TXBuffer);
 738:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <TXBuffer>
 73c:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <TXBuffer+0x1>
 740:	36 d3       	rcall	.+1644   	; 0xdae <free>
		// Data not transmitted here (return error)
		case TW_MT_DATA_NACK:
		case TW_MR_DATA_NACK:
			break;
	}
}
 742:	ff 91       	pop	r31
 744:	ef 91       	pop	r30
 746:	bf 91       	pop	r27
 748:	af 91       	pop	r26
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	7f 91       	pop	r23
 750:	6f 91       	pop	r22
 752:	5f 91       	pop	r21
 754:	4f 91       	pop	r20
 756:	3f 91       	pop	r19
 758:	2f 91       	pop	r18
 75a:	0f 90       	pop	r0
 75c:	0b be       	out	0x3b, r0	; 59
 75e:	0f 90       	pop	r0
 760:	0f be       	out	0x3f, r0	; 63
 762:	0f 90       	pop	r0
 764:	1f 90       	pop	r1
 766:	18 95       	reti

00000768 <twi_init>:

uint8_t twi_init(long sclFrequency)
{
 768:	9b 01       	movw	r18, r22
 76a:	ac 01       	movw	r20, r24
	// Set no pre-scaling
	TWSR = !((1 << TWPS0) | (1<< TWPS1));
 76c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	// Set bit rate
	TWBR = (F_CPU / sclFrequency - 16) / 2;
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	70 e8       	ldi	r23, 0x80	; 128
 774:	80 e7       	ldi	r24, 0x70	; 112
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	69 d2       	rcall	.+1234   	; 0xc4c <__divmodsi4>
 77a:	ba 01       	movw	r22, r20
 77c:	a9 01       	movw	r20, r18
 77e:	40 51       	subi	r20, 0x10	; 16
 780:	51 09       	sbc	r21, r1
 782:	61 09       	sbc	r22, r1
 784:	71 09       	sbc	r23, r1
 786:	db 01       	movw	r26, r22
 788:	ca 01       	movw	r24, r20
 78a:	1a f4       	brpl	.+6      	; 0x792 <twi_init+0x2a>
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	a1 1d       	adc	r26, r1
 790:	b1 1d       	adc	r27, r1
 792:	b5 95       	asr	r27
 794:	a7 95       	ror	r26
 796:	97 95       	ror	r25
 798:	87 95       	ror	r24
 79a:	e8 eb       	ldi	r30, 0xB8	; 184
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 83       	st	Z, r24
	// Enable TWI and interrupt
	TWCR = (1 << TWEN) | (1 << TWIE);
 7a0:	85 e0       	ldi	r24, 0x05	; 5
 7a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	return TWBR;
 7a6:	80 81       	ld	r24, Z
}
 7a8:	08 95       	ret

000007aa <twi_write>:

void twi_write(uint8_t device, uint8_t address, uint8_t *data, int len, void (*callback)(uint8_t*))
{
 7aa:	0f 93       	push	r16
 7ac:	1f 93       	push	r17
	//usart0_send_arr(" W-", 3);
	mode = Sending;
 7ae:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <mode>
	deviceId = device;
 7b2:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <deviceId>
	reg = address;
 7b6:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <reg>
	TXBuffer = data;
 7ba:	50 93 2c 02 	sts	0x022C, r21	; 0x80022c <TXBuffer+0x1>
 7be:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <TXBuffer>
	TXIndex = 0;
 7c2:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TXIndex+0x1>
 7c6:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TXIndex>
	TXSize = len;
 7ca:	30 93 2a 02 	sts	0x022A, r19	; 0x80022a <TXSize+0x1>
 7ce:	20 93 29 02 	sts	0x0229, r18	; 0x800229 <TXSize>
	callbackFunction = callback;
 7d2:	10 93 25 02 	sts	0x0225, r17	; 0x800225 <callbackFunction+0x1>
 7d6:	00 93 24 02 	sts	0x0224, r16	; 0x800224 <callbackFunction>

	TWI_SendStart();
 7da:	85 ea       	ldi	r24, 0xA5	; 165
 7dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
 7e0:	1f 91       	pop	r17
 7e2:	0f 91       	pop	r16
 7e4:	08 95       	ret

000007e6 <twi_read>:

void twi_read(uint8_t device, uint8_t address, int len, void (*callback)(uint8_t*))
{
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	ea 01       	movw	r28, r20
 7f0:	89 01       	movw	r16, r18
	//usart0_send_arr(" R-", 3);
	mode = Receiving;
 7f2:	91 e0       	ldi	r25, 0x01	; 1
 7f4:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <mode>
	deviceId = device;
 7f8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <deviceId>
	reg = address;
 7fc:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <reg>
	TXBuffer = (uint8_t*)malloc(len);
 800:	ca 01       	movw	r24, r20
 802:	40 d2       	rcall	.+1152   	; 0xc84 <malloc>
 804:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <TXBuffer+0x1>
 808:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <TXBuffer>
	TXIndex = 0;
 80c:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <TXIndex+0x1>
 810:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TXIndex>
	TXSize = len;
 814:	d0 93 2a 02 	sts	0x022A, r29	; 0x80022a <TXSize+0x1>
 818:	c0 93 29 02 	sts	0x0229, r28	; 0x800229 <TXSize>
	callbackFunction = callback;
 81c:	10 93 25 02 	sts	0x0225, r17	; 0x800225 <callbackFunction+0x1>
 820:	00 93 24 02 	sts	0x0224, r16	; 0x800224 <callbackFunction>

	TWI_SendStart();
 824:	85 ea       	ldi	r24, 0xA5	; 165
 826:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	08 95       	ret

00000834 <__subsf3>:
 834:	50 58       	subi	r21, 0x80	; 128

00000836 <__addsf3>:
 836:	bb 27       	eor	r27, r27
 838:	aa 27       	eor	r26, r26
 83a:	0e d0       	rcall	.+28     	; 0x858 <__addsf3x>
 83c:	48 c1       	rjmp	.+656    	; 0xace <__fp_round>
 83e:	39 d1       	rcall	.+626    	; 0xab2 <__fp_pscA>
 840:	30 f0       	brcs	.+12     	; 0x84e <__addsf3+0x18>
 842:	3e d1       	rcall	.+636    	; 0xac0 <__fp_pscB>
 844:	20 f0       	brcs	.+8      	; 0x84e <__addsf3+0x18>
 846:	31 f4       	brne	.+12     	; 0x854 <__addsf3+0x1e>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	11 f4       	brne	.+4      	; 0x850 <__addsf3+0x1a>
 84c:	1e f4       	brtc	.+6      	; 0x854 <__addsf3+0x1e>
 84e:	2e c1       	rjmp	.+604    	; 0xaac <__fp_nan>
 850:	0e f4       	brtc	.+2      	; 0x854 <__addsf3+0x1e>
 852:	e0 95       	com	r30
 854:	e7 fb       	bst	r30, 7
 856:	24 c1       	rjmp	.+584    	; 0xaa0 <__fp_inf>

00000858 <__addsf3x>:
 858:	e9 2f       	mov	r30, r25
 85a:	4a d1       	rcall	.+660    	; 0xaf0 <__fp_split3>
 85c:	80 f3       	brcs	.-32     	; 0x83e <__addsf3+0x8>
 85e:	ba 17       	cp	r27, r26
 860:	62 07       	cpc	r22, r18
 862:	73 07       	cpc	r23, r19
 864:	84 07       	cpc	r24, r20
 866:	95 07       	cpc	r25, r21
 868:	18 f0       	brcs	.+6      	; 0x870 <__addsf3x+0x18>
 86a:	71 f4       	brne	.+28     	; 0x888 <__addsf3x+0x30>
 86c:	9e f5       	brtc	.+102    	; 0x8d4 <__addsf3x+0x7c>
 86e:	62 c1       	rjmp	.+708    	; 0xb34 <__fp_zero>
 870:	0e f4       	brtc	.+2      	; 0x874 <__addsf3x+0x1c>
 872:	e0 95       	com	r30
 874:	0b 2e       	mov	r0, r27
 876:	ba 2f       	mov	r27, r26
 878:	a0 2d       	mov	r26, r0
 87a:	0b 01       	movw	r0, r22
 87c:	b9 01       	movw	r22, r18
 87e:	90 01       	movw	r18, r0
 880:	0c 01       	movw	r0, r24
 882:	ca 01       	movw	r24, r20
 884:	a0 01       	movw	r20, r0
 886:	11 24       	eor	r1, r1
 888:	ff 27       	eor	r31, r31
 88a:	59 1b       	sub	r21, r25
 88c:	99 f0       	breq	.+38     	; 0x8b4 <__addsf3x+0x5c>
 88e:	59 3f       	cpi	r21, 0xF9	; 249
 890:	50 f4       	brcc	.+20     	; 0x8a6 <__addsf3x+0x4e>
 892:	50 3e       	cpi	r21, 0xE0	; 224
 894:	68 f1       	brcs	.+90     	; 0x8f0 <__addsf3x+0x98>
 896:	1a 16       	cp	r1, r26
 898:	f0 40       	sbci	r31, 0x00	; 0
 89a:	a2 2f       	mov	r26, r18
 89c:	23 2f       	mov	r18, r19
 89e:	34 2f       	mov	r19, r20
 8a0:	44 27       	eor	r20, r20
 8a2:	58 5f       	subi	r21, 0xF8	; 248
 8a4:	f3 cf       	rjmp	.-26     	; 0x88c <__addsf3x+0x34>
 8a6:	46 95       	lsr	r20
 8a8:	37 95       	ror	r19
 8aa:	27 95       	ror	r18
 8ac:	a7 95       	ror	r26
 8ae:	f0 40       	sbci	r31, 0x00	; 0
 8b0:	53 95       	inc	r21
 8b2:	c9 f7       	brne	.-14     	; 0x8a6 <__addsf3x+0x4e>
 8b4:	7e f4       	brtc	.+30     	; 0x8d4 <__addsf3x+0x7c>
 8b6:	1f 16       	cp	r1, r31
 8b8:	ba 0b       	sbc	r27, r26
 8ba:	62 0b       	sbc	r22, r18
 8bc:	73 0b       	sbc	r23, r19
 8be:	84 0b       	sbc	r24, r20
 8c0:	ba f0       	brmi	.+46     	; 0x8f0 <__addsf3x+0x98>
 8c2:	91 50       	subi	r25, 0x01	; 1
 8c4:	a1 f0       	breq	.+40     	; 0x8ee <__addsf3x+0x96>
 8c6:	ff 0f       	add	r31, r31
 8c8:	bb 1f       	adc	r27, r27
 8ca:	66 1f       	adc	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	c2 f7       	brpl	.-16     	; 0x8c2 <__addsf3x+0x6a>
 8d2:	0e c0       	rjmp	.+28     	; 0x8f0 <__addsf3x+0x98>
 8d4:	ba 0f       	add	r27, r26
 8d6:	62 1f       	adc	r22, r18
 8d8:	73 1f       	adc	r23, r19
 8da:	84 1f       	adc	r24, r20
 8dc:	48 f4       	brcc	.+18     	; 0x8f0 <__addsf3x+0x98>
 8de:	87 95       	ror	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b7 95       	ror	r27
 8e6:	f7 95       	ror	r31
 8e8:	9e 3f       	cpi	r25, 0xFE	; 254
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <__addsf3x+0x96>
 8ec:	b3 cf       	rjmp	.-154    	; 0x854 <__addsf3+0x1e>
 8ee:	93 95       	inc	r25
 8f0:	88 0f       	add	r24, r24
 8f2:	08 f0       	brcs	.+2      	; 0x8f6 <__addsf3x+0x9e>
 8f4:	99 27       	eor	r25, r25
 8f6:	ee 0f       	add	r30, r30
 8f8:	97 95       	ror	r25
 8fa:	87 95       	ror	r24
 8fc:	08 95       	ret

000008fe <__divsf3>:
 8fe:	0c d0       	rcall	.+24     	; 0x918 <__divsf3x>
 900:	e6 c0       	rjmp	.+460    	; 0xace <__fp_round>
 902:	de d0       	rcall	.+444    	; 0xac0 <__fp_pscB>
 904:	40 f0       	brcs	.+16     	; 0x916 <__divsf3+0x18>
 906:	d5 d0       	rcall	.+426    	; 0xab2 <__fp_pscA>
 908:	30 f0       	brcs	.+12     	; 0x916 <__divsf3+0x18>
 90a:	21 f4       	brne	.+8      	; 0x914 <__divsf3+0x16>
 90c:	5f 3f       	cpi	r21, 0xFF	; 255
 90e:	19 f0       	breq	.+6      	; 0x916 <__divsf3+0x18>
 910:	c7 c0       	rjmp	.+398    	; 0xaa0 <__fp_inf>
 912:	51 11       	cpse	r21, r1
 914:	10 c1       	rjmp	.+544    	; 0xb36 <__fp_szero>
 916:	ca c0       	rjmp	.+404    	; 0xaac <__fp_nan>

00000918 <__divsf3x>:
 918:	eb d0       	rcall	.+470    	; 0xaf0 <__fp_split3>
 91a:	98 f3       	brcs	.-26     	; 0x902 <__divsf3+0x4>

0000091c <__divsf3_pse>:
 91c:	99 23       	and	r25, r25
 91e:	c9 f3       	breq	.-14     	; 0x912 <__divsf3+0x14>
 920:	55 23       	and	r21, r21
 922:	b1 f3       	breq	.-20     	; 0x910 <__divsf3+0x12>
 924:	95 1b       	sub	r25, r21
 926:	55 0b       	sbc	r21, r21
 928:	bb 27       	eor	r27, r27
 92a:	aa 27       	eor	r26, r26
 92c:	62 17       	cp	r22, r18
 92e:	73 07       	cpc	r23, r19
 930:	84 07       	cpc	r24, r20
 932:	38 f0       	brcs	.+14     	; 0x942 <__divsf3_pse+0x26>
 934:	9f 5f       	subi	r25, 0xFF	; 255
 936:	5f 4f       	sbci	r21, 0xFF	; 255
 938:	22 0f       	add	r18, r18
 93a:	33 1f       	adc	r19, r19
 93c:	44 1f       	adc	r20, r20
 93e:	aa 1f       	adc	r26, r26
 940:	a9 f3       	breq	.-22     	; 0x92c <__divsf3_pse+0x10>
 942:	33 d0       	rcall	.+102    	; 0x9aa <__divsf3_pse+0x8e>
 944:	0e 2e       	mov	r0, r30
 946:	3a f0       	brmi	.+14     	; 0x956 <__divsf3_pse+0x3a>
 948:	e0 e8       	ldi	r30, 0x80	; 128
 94a:	30 d0       	rcall	.+96     	; 0x9ac <__divsf3_pse+0x90>
 94c:	91 50       	subi	r25, 0x01	; 1
 94e:	50 40       	sbci	r21, 0x00	; 0
 950:	e6 95       	lsr	r30
 952:	00 1c       	adc	r0, r0
 954:	ca f7       	brpl	.-14     	; 0x948 <__divsf3_pse+0x2c>
 956:	29 d0       	rcall	.+82     	; 0x9aa <__divsf3_pse+0x8e>
 958:	fe 2f       	mov	r31, r30
 95a:	27 d0       	rcall	.+78     	; 0x9aa <__divsf3_pse+0x8e>
 95c:	66 0f       	add	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	88 1f       	adc	r24, r24
 962:	bb 1f       	adc	r27, r27
 964:	26 17       	cp	r18, r22
 966:	37 07       	cpc	r19, r23
 968:	48 07       	cpc	r20, r24
 96a:	ab 07       	cpc	r26, r27
 96c:	b0 e8       	ldi	r27, 0x80	; 128
 96e:	09 f0       	breq	.+2      	; 0x972 <__divsf3_pse+0x56>
 970:	bb 0b       	sbc	r27, r27
 972:	80 2d       	mov	r24, r0
 974:	bf 01       	movw	r22, r30
 976:	ff 27       	eor	r31, r31
 978:	93 58       	subi	r25, 0x83	; 131
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
 97c:	2a f0       	brmi	.+10     	; 0x988 <__divsf3_pse+0x6c>
 97e:	9e 3f       	cpi	r25, 0xFE	; 254
 980:	51 05       	cpc	r21, r1
 982:	68 f0       	brcs	.+26     	; 0x99e <__divsf3_pse+0x82>
 984:	8d c0       	rjmp	.+282    	; 0xaa0 <__fp_inf>
 986:	d7 c0       	rjmp	.+430    	; 0xb36 <__fp_szero>
 988:	5f 3f       	cpi	r21, 0xFF	; 255
 98a:	ec f3       	brlt	.-6      	; 0x986 <__divsf3_pse+0x6a>
 98c:	98 3e       	cpi	r25, 0xE8	; 232
 98e:	dc f3       	brlt	.-10     	; 0x986 <__divsf3_pse+0x6a>
 990:	86 95       	lsr	r24
 992:	77 95       	ror	r23
 994:	67 95       	ror	r22
 996:	b7 95       	ror	r27
 998:	f7 95       	ror	r31
 99a:	9f 5f       	subi	r25, 0xFF	; 255
 99c:	c9 f7       	brne	.-14     	; 0x990 <__divsf3_pse+0x74>
 99e:	88 0f       	add	r24, r24
 9a0:	91 1d       	adc	r25, r1
 9a2:	96 95       	lsr	r25
 9a4:	87 95       	ror	r24
 9a6:	97 f9       	bld	r25, 7
 9a8:	08 95       	ret
 9aa:	e1 e0       	ldi	r30, 0x01	; 1
 9ac:	66 0f       	add	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	bb 1f       	adc	r27, r27
 9b4:	62 17       	cp	r22, r18
 9b6:	73 07       	cpc	r23, r19
 9b8:	84 07       	cpc	r24, r20
 9ba:	ba 07       	cpc	r27, r26
 9bc:	20 f0       	brcs	.+8      	; 0x9c6 <__divsf3_pse+0xaa>
 9be:	62 1b       	sub	r22, r18
 9c0:	73 0b       	sbc	r23, r19
 9c2:	84 0b       	sbc	r24, r20
 9c4:	ba 0b       	sbc	r27, r26
 9c6:	ee 1f       	adc	r30, r30
 9c8:	88 f7       	brcc	.-30     	; 0x9ac <__divsf3_pse+0x90>
 9ca:	e0 95       	com	r30
 9cc:	08 95       	ret

000009ce <__fixunssfsi>:
 9ce:	98 d0       	rcall	.+304    	; 0xb00 <__fp_splitA>
 9d0:	88 f0       	brcs	.+34     	; 0x9f4 <__fixunssfsi+0x26>
 9d2:	9f 57       	subi	r25, 0x7F	; 127
 9d4:	90 f0       	brcs	.+36     	; 0x9fa <__fixunssfsi+0x2c>
 9d6:	b9 2f       	mov	r27, r25
 9d8:	99 27       	eor	r25, r25
 9da:	b7 51       	subi	r27, 0x17	; 23
 9dc:	a0 f0       	brcs	.+40     	; 0xa06 <__fixunssfsi+0x38>
 9de:	d1 f0       	breq	.+52     	; 0xa14 <__fixunssfsi+0x46>
 9e0:	66 0f       	add	r22, r22
 9e2:	77 1f       	adc	r23, r23
 9e4:	88 1f       	adc	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	1a f0       	brmi	.+6      	; 0x9f0 <__fixunssfsi+0x22>
 9ea:	ba 95       	dec	r27
 9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__fixunssfsi+0x12>
 9ee:	12 c0       	rjmp	.+36     	; 0xa14 <__fixunssfsi+0x46>
 9f0:	b1 30       	cpi	r27, 0x01	; 1
 9f2:	81 f0       	breq	.+32     	; 0xa14 <__fixunssfsi+0x46>
 9f4:	9f d0       	rcall	.+318    	; 0xb34 <__fp_zero>
 9f6:	b1 e0       	ldi	r27, 0x01	; 1
 9f8:	08 95       	ret
 9fa:	9c c0       	rjmp	.+312    	; 0xb34 <__fp_zero>
 9fc:	67 2f       	mov	r22, r23
 9fe:	78 2f       	mov	r23, r24
 a00:	88 27       	eor	r24, r24
 a02:	b8 5f       	subi	r27, 0xF8	; 248
 a04:	39 f0       	breq	.+14     	; 0xa14 <__fixunssfsi+0x46>
 a06:	b9 3f       	cpi	r27, 0xF9	; 249
 a08:	cc f3       	brlt	.-14     	; 0x9fc <__fixunssfsi+0x2e>
 a0a:	86 95       	lsr	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	b3 95       	inc	r27
 a12:	d9 f7       	brne	.-10     	; 0xa0a <__fixunssfsi+0x3c>
 a14:	3e f4       	brtc	.+14     	; 0xa24 <__fixunssfsi+0x56>
 a16:	90 95       	com	r25
 a18:	80 95       	com	r24
 a1a:	70 95       	com	r23
 a1c:	61 95       	neg	r22
 a1e:	7f 4f       	sbci	r23, 0xFF	; 255
 a20:	8f 4f       	sbci	r24, 0xFF	; 255
 a22:	9f 4f       	sbci	r25, 0xFF	; 255
 a24:	08 95       	ret

00000a26 <__floatunsisf>:
 a26:	e8 94       	clt
 a28:	09 c0       	rjmp	.+18     	; 0xa3c <__floatsisf+0x12>

00000a2a <__floatsisf>:
 a2a:	97 fb       	bst	r25, 7
 a2c:	3e f4       	brtc	.+14     	; 0xa3c <__floatsisf+0x12>
 a2e:	90 95       	com	r25
 a30:	80 95       	com	r24
 a32:	70 95       	com	r23
 a34:	61 95       	neg	r22
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	99 23       	and	r25, r25
 a3e:	a9 f0       	breq	.+42     	; 0xa6a <__floatsisf+0x40>
 a40:	f9 2f       	mov	r31, r25
 a42:	96 e9       	ldi	r25, 0x96	; 150
 a44:	bb 27       	eor	r27, r27
 a46:	93 95       	inc	r25
 a48:	f6 95       	lsr	r31
 a4a:	87 95       	ror	r24
 a4c:	77 95       	ror	r23
 a4e:	67 95       	ror	r22
 a50:	b7 95       	ror	r27
 a52:	f1 11       	cpse	r31, r1
 a54:	f8 cf       	rjmp	.-16     	; 0xa46 <__floatsisf+0x1c>
 a56:	fa f4       	brpl	.+62     	; 0xa96 <__floatsisf+0x6c>
 a58:	bb 0f       	add	r27, r27
 a5a:	11 f4       	brne	.+4      	; 0xa60 <__floatsisf+0x36>
 a5c:	60 ff       	sbrs	r22, 0
 a5e:	1b c0       	rjmp	.+54     	; 0xa96 <__floatsisf+0x6c>
 a60:	6f 5f       	subi	r22, 0xFF	; 255
 a62:	7f 4f       	sbci	r23, 0xFF	; 255
 a64:	8f 4f       	sbci	r24, 0xFF	; 255
 a66:	9f 4f       	sbci	r25, 0xFF	; 255
 a68:	16 c0       	rjmp	.+44     	; 0xa96 <__floatsisf+0x6c>
 a6a:	88 23       	and	r24, r24
 a6c:	11 f0       	breq	.+4      	; 0xa72 <__floatsisf+0x48>
 a6e:	96 e9       	ldi	r25, 0x96	; 150
 a70:	11 c0       	rjmp	.+34     	; 0xa94 <__floatsisf+0x6a>
 a72:	77 23       	and	r23, r23
 a74:	21 f0       	breq	.+8      	; 0xa7e <__floatsisf+0x54>
 a76:	9e e8       	ldi	r25, 0x8E	; 142
 a78:	87 2f       	mov	r24, r23
 a7a:	76 2f       	mov	r23, r22
 a7c:	05 c0       	rjmp	.+10     	; 0xa88 <__floatsisf+0x5e>
 a7e:	66 23       	and	r22, r22
 a80:	71 f0       	breq	.+28     	; 0xa9e <__floatsisf+0x74>
 a82:	96 e8       	ldi	r25, 0x86	; 134
 a84:	86 2f       	mov	r24, r22
 a86:	70 e0       	ldi	r23, 0x00	; 0
 a88:	60 e0       	ldi	r22, 0x00	; 0
 a8a:	2a f0       	brmi	.+10     	; 0xa96 <__floatsisf+0x6c>
 a8c:	9a 95       	dec	r25
 a8e:	66 0f       	add	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	da f7       	brpl	.-10     	; 0xa8c <__floatsisf+0x62>
 a96:	88 0f       	add	r24, r24
 a98:	96 95       	lsr	r25
 a9a:	87 95       	ror	r24
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <__fp_inf>:
 aa0:	97 f9       	bld	r25, 7
 aa2:	9f 67       	ori	r25, 0x7F	; 127
 aa4:	80 e8       	ldi	r24, 0x80	; 128
 aa6:	70 e0       	ldi	r23, 0x00	; 0
 aa8:	60 e0       	ldi	r22, 0x00	; 0
 aaa:	08 95       	ret

00000aac <__fp_nan>:
 aac:	9f ef       	ldi	r25, 0xFF	; 255
 aae:	80 ec       	ldi	r24, 0xC0	; 192
 ab0:	08 95       	ret

00000ab2 <__fp_pscA>:
 ab2:	00 24       	eor	r0, r0
 ab4:	0a 94       	dec	r0
 ab6:	16 16       	cp	r1, r22
 ab8:	17 06       	cpc	r1, r23
 aba:	18 06       	cpc	r1, r24
 abc:	09 06       	cpc	r0, r25
 abe:	08 95       	ret

00000ac0 <__fp_pscB>:
 ac0:	00 24       	eor	r0, r0
 ac2:	0a 94       	dec	r0
 ac4:	12 16       	cp	r1, r18
 ac6:	13 06       	cpc	r1, r19
 ac8:	14 06       	cpc	r1, r20
 aca:	05 06       	cpc	r0, r21
 acc:	08 95       	ret

00000ace <__fp_round>:
 ace:	09 2e       	mov	r0, r25
 ad0:	03 94       	inc	r0
 ad2:	00 0c       	add	r0, r0
 ad4:	11 f4       	brne	.+4      	; 0xada <__fp_round+0xc>
 ad6:	88 23       	and	r24, r24
 ad8:	52 f0       	brmi	.+20     	; 0xaee <__fp_round+0x20>
 ada:	bb 0f       	add	r27, r27
 adc:	40 f4       	brcc	.+16     	; 0xaee <__fp_round+0x20>
 ade:	bf 2b       	or	r27, r31
 ae0:	11 f4       	brne	.+4      	; 0xae6 <__fp_round+0x18>
 ae2:	60 ff       	sbrs	r22, 0
 ae4:	04 c0       	rjmp	.+8      	; 0xaee <__fp_round+0x20>
 ae6:	6f 5f       	subi	r22, 0xFF	; 255
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	08 95       	ret

00000af0 <__fp_split3>:
 af0:	57 fd       	sbrc	r21, 7
 af2:	90 58       	subi	r25, 0x80	; 128
 af4:	44 0f       	add	r20, r20
 af6:	55 1f       	adc	r21, r21
 af8:	59 f0       	breq	.+22     	; 0xb10 <__fp_splitA+0x10>
 afa:	5f 3f       	cpi	r21, 0xFF	; 255
 afc:	71 f0       	breq	.+28     	; 0xb1a <__fp_splitA+0x1a>
 afe:	47 95       	ror	r20

00000b00 <__fp_splitA>:
 b00:	88 0f       	add	r24, r24
 b02:	97 fb       	bst	r25, 7
 b04:	99 1f       	adc	r25, r25
 b06:	61 f0       	breq	.+24     	; 0xb20 <__fp_splitA+0x20>
 b08:	9f 3f       	cpi	r25, 0xFF	; 255
 b0a:	79 f0       	breq	.+30     	; 0xb2a <__fp_splitA+0x2a>
 b0c:	87 95       	ror	r24
 b0e:	08 95       	ret
 b10:	12 16       	cp	r1, r18
 b12:	13 06       	cpc	r1, r19
 b14:	14 06       	cpc	r1, r20
 b16:	55 1f       	adc	r21, r21
 b18:	f2 cf       	rjmp	.-28     	; 0xafe <__fp_split3+0xe>
 b1a:	46 95       	lsr	r20
 b1c:	f1 df       	rcall	.-30     	; 0xb00 <__fp_splitA>
 b1e:	08 c0       	rjmp	.+16     	; 0xb30 <__fp_splitA+0x30>
 b20:	16 16       	cp	r1, r22
 b22:	17 06       	cpc	r1, r23
 b24:	18 06       	cpc	r1, r24
 b26:	99 1f       	adc	r25, r25
 b28:	f1 cf       	rjmp	.-30     	; 0xb0c <__fp_splitA+0xc>
 b2a:	86 95       	lsr	r24
 b2c:	71 05       	cpc	r23, r1
 b2e:	61 05       	cpc	r22, r1
 b30:	08 94       	sec
 b32:	08 95       	ret

00000b34 <__fp_zero>:
 b34:	e8 94       	clt

00000b36 <__fp_szero>:
 b36:	bb 27       	eor	r27, r27
 b38:	66 27       	eor	r22, r22
 b3a:	77 27       	eor	r23, r23
 b3c:	cb 01       	movw	r24, r22
 b3e:	97 f9       	bld	r25, 7
 b40:	08 95       	ret

00000b42 <__mulsf3>:
 b42:	0b d0       	rcall	.+22     	; 0xb5a <__mulsf3x>
 b44:	c4 cf       	rjmp	.-120    	; 0xace <__fp_round>
 b46:	b5 df       	rcall	.-150    	; 0xab2 <__fp_pscA>
 b48:	28 f0       	brcs	.+10     	; 0xb54 <__mulsf3+0x12>
 b4a:	ba df       	rcall	.-140    	; 0xac0 <__fp_pscB>
 b4c:	18 f0       	brcs	.+6      	; 0xb54 <__mulsf3+0x12>
 b4e:	95 23       	and	r25, r21
 b50:	09 f0       	breq	.+2      	; 0xb54 <__mulsf3+0x12>
 b52:	a6 cf       	rjmp	.-180    	; 0xaa0 <__fp_inf>
 b54:	ab cf       	rjmp	.-170    	; 0xaac <__fp_nan>
 b56:	11 24       	eor	r1, r1
 b58:	ee cf       	rjmp	.-36     	; 0xb36 <__fp_szero>

00000b5a <__mulsf3x>:
 b5a:	ca df       	rcall	.-108    	; 0xaf0 <__fp_split3>
 b5c:	a0 f3       	brcs	.-24     	; 0xb46 <__mulsf3+0x4>

00000b5e <__mulsf3_pse>:
 b5e:	95 9f       	mul	r25, r21
 b60:	d1 f3       	breq	.-12     	; 0xb56 <__mulsf3+0x14>
 b62:	95 0f       	add	r25, r21
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	55 1f       	adc	r21, r21
 b68:	62 9f       	mul	r22, r18
 b6a:	f0 01       	movw	r30, r0
 b6c:	72 9f       	mul	r23, r18
 b6e:	bb 27       	eor	r27, r27
 b70:	f0 0d       	add	r31, r0
 b72:	b1 1d       	adc	r27, r1
 b74:	63 9f       	mul	r22, r19
 b76:	aa 27       	eor	r26, r26
 b78:	f0 0d       	add	r31, r0
 b7a:	b1 1d       	adc	r27, r1
 b7c:	aa 1f       	adc	r26, r26
 b7e:	64 9f       	mul	r22, r20
 b80:	66 27       	eor	r22, r22
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	66 1f       	adc	r22, r22
 b88:	82 9f       	mul	r24, r18
 b8a:	22 27       	eor	r18, r18
 b8c:	b0 0d       	add	r27, r0
 b8e:	a1 1d       	adc	r26, r1
 b90:	62 1f       	adc	r22, r18
 b92:	73 9f       	mul	r23, r19
 b94:	b0 0d       	add	r27, r0
 b96:	a1 1d       	adc	r26, r1
 b98:	62 1f       	adc	r22, r18
 b9a:	83 9f       	mul	r24, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	22 1f       	adc	r18, r18
 ba2:	74 9f       	mul	r23, r20
 ba4:	33 27       	eor	r19, r19
 ba6:	a0 0d       	add	r26, r0
 ba8:	61 1d       	adc	r22, r1
 baa:	23 1f       	adc	r18, r19
 bac:	84 9f       	mul	r24, r20
 bae:	60 0d       	add	r22, r0
 bb0:	21 1d       	adc	r18, r1
 bb2:	82 2f       	mov	r24, r18
 bb4:	76 2f       	mov	r23, r22
 bb6:	6a 2f       	mov	r22, r26
 bb8:	11 24       	eor	r1, r1
 bba:	9f 57       	subi	r25, 0x7F	; 127
 bbc:	50 40       	sbci	r21, 0x00	; 0
 bbe:	8a f0       	brmi	.+34     	; 0xbe2 <__mulsf3_pse+0x84>
 bc0:	e1 f0       	breq	.+56     	; 0xbfa <__mulsf3_pse+0x9c>
 bc2:	88 23       	and	r24, r24
 bc4:	4a f0       	brmi	.+18     	; 0xbd8 <__mulsf3_pse+0x7a>
 bc6:	ee 0f       	add	r30, r30
 bc8:	ff 1f       	adc	r31, r31
 bca:	bb 1f       	adc	r27, r27
 bcc:	66 1f       	adc	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	91 50       	subi	r25, 0x01	; 1
 bd4:	50 40       	sbci	r21, 0x00	; 0
 bd6:	a9 f7       	brne	.-22     	; 0xbc2 <__mulsf3_pse+0x64>
 bd8:	9e 3f       	cpi	r25, 0xFE	; 254
 bda:	51 05       	cpc	r21, r1
 bdc:	70 f0       	brcs	.+28     	; 0xbfa <__mulsf3_pse+0x9c>
 bde:	60 cf       	rjmp	.-320    	; 0xaa0 <__fp_inf>
 be0:	aa cf       	rjmp	.-172    	; 0xb36 <__fp_szero>
 be2:	5f 3f       	cpi	r21, 0xFF	; 255
 be4:	ec f3       	brlt	.-6      	; 0xbe0 <__mulsf3_pse+0x82>
 be6:	98 3e       	cpi	r25, 0xE8	; 232
 be8:	dc f3       	brlt	.-10     	; 0xbe0 <__mulsf3_pse+0x82>
 bea:	86 95       	lsr	r24
 bec:	77 95       	ror	r23
 bee:	67 95       	ror	r22
 bf0:	b7 95       	ror	r27
 bf2:	f7 95       	ror	r31
 bf4:	e7 95       	ror	r30
 bf6:	9f 5f       	subi	r25, 0xFF	; 255
 bf8:	c1 f7       	brne	.-16     	; 0xbea <__mulsf3_pse+0x8c>
 bfa:	fe 2b       	or	r31, r30
 bfc:	88 0f       	add	r24, r24
 bfe:	91 1d       	adc	r25, r1
 c00:	96 95       	lsr	r25
 c02:	87 95       	ror	r24
 c04:	97 f9       	bld	r25, 7
 c06:	08 95       	ret

00000c08 <__udivmodsi4>:
 c08:	a1 e2       	ldi	r26, 0x21	; 33
 c0a:	1a 2e       	mov	r1, r26
 c0c:	aa 1b       	sub	r26, r26
 c0e:	bb 1b       	sub	r27, r27
 c10:	fd 01       	movw	r30, r26
 c12:	0d c0       	rjmp	.+26     	; 0xc2e <__udivmodsi4_ep>

00000c14 <__udivmodsi4_loop>:
 c14:	aa 1f       	adc	r26, r26
 c16:	bb 1f       	adc	r27, r27
 c18:	ee 1f       	adc	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	a2 17       	cp	r26, r18
 c1e:	b3 07       	cpc	r27, r19
 c20:	e4 07       	cpc	r30, r20
 c22:	f5 07       	cpc	r31, r21
 c24:	20 f0       	brcs	.+8      	; 0xc2e <__udivmodsi4_ep>
 c26:	a2 1b       	sub	r26, r18
 c28:	b3 0b       	sbc	r27, r19
 c2a:	e4 0b       	sbc	r30, r20
 c2c:	f5 0b       	sbc	r31, r21

00000c2e <__udivmodsi4_ep>:
 c2e:	66 1f       	adc	r22, r22
 c30:	77 1f       	adc	r23, r23
 c32:	88 1f       	adc	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	1a 94       	dec	r1
 c38:	69 f7       	brne	.-38     	; 0xc14 <__udivmodsi4_loop>
 c3a:	60 95       	com	r22
 c3c:	70 95       	com	r23
 c3e:	80 95       	com	r24
 c40:	90 95       	com	r25
 c42:	9b 01       	movw	r18, r22
 c44:	ac 01       	movw	r20, r24
 c46:	bd 01       	movw	r22, r26
 c48:	cf 01       	movw	r24, r30
 c4a:	08 95       	ret

00000c4c <__divmodsi4>:
 c4c:	05 2e       	mov	r0, r21
 c4e:	97 fb       	bst	r25, 7
 c50:	16 f4       	brtc	.+4      	; 0xc56 <__divmodsi4+0xa>
 c52:	00 94       	com	r0
 c54:	0f d0       	rcall	.+30     	; 0xc74 <__negsi2>
 c56:	57 fd       	sbrc	r21, 7
 c58:	05 d0       	rcall	.+10     	; 0xc64 <__divmodsi4_neg2>
 c5a:	d6 df       	rcall	.-84     	; 0xc08 <__udivmodsi4>
 c5c:	07 fc       	sbrc	r0, 7
 c5e:	02 d0       	rcall	.+4      	; 0xc64 <__divmodsi4_neg2>
 c60:	46 f4       	brtc	.+16     	; 0xc72 <__divmodsi4_exit>
 c62:	08 c0       	rjmp	.+16     	; 0xc74 <__negsi2>

00000c64 <__divmodsi4_neg2>:
 c64:	50 95       	com	r21
 c66:	40 95       	com	r20
 c68:	30 95       	com	r19
 c6a:	21 95       	neg	r18
 c6c:	3f 4f       	sbci	r19, 0xFF	; 255
 c6e:	4f 4f       	sbci	r20, 0xFF	; 255
 c70:	5f 4f       	sbci	r21, 0xFF	; 255

00000c72 <__divmodsi4_exit>:
 c72:	08 95       	ret

00000c74 <__negsi2>:
 c74:	90 95       	com	r25
 c76:	80 95       	com	r24
 c78:	70 95       	com	r23
 c7a:	61 95       	neg	r22
 c7c:	7f 4f       	sbci	r23, 0xFF	; 255
 c7e:	8f 4f       	sbci	r24, 0xFF	; 255
 c80:	9f 4f       	sbci	r25, 0xFF	; 255
 c82:	08 95       	ret

00000c84 <malloc>:
 c84:	cf 93       	push	r28
 c86:	df 93       	push	r29
 c88:	82 30       	cpi	r24, 0x02	; 2
 c8a:	91 05       	cpc	r25, r1
 c8c:	10 f4       	brcc	.+4      	; 0xc92 <malloc+0xe>
 c8e:	82 e0       	ldi	r24, 0x02	; 2
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <__flp>
 c96:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <__flp+0x1>
 c9a:	20 e0       	ldi	r18, 0x00	; 0
 c9c:	30 e0       	ldi	r19, 0x00	; 0
 c9e:	c0 e0       	ldi	r28, 0x00	; 0
 ca0:	d0 e0       	ldi	r29, 0x00	; 0
 ca2:	30 97       	sbiw	r30, 0x00	; 0
 ca4:	11 f1       	breq	.+68     	; 0xcea <malloc+0x66>
 ca6:	40 81       	ld	r20, Z
 ca8:	51 81       	ldd	r21, Z+1	; 0x01
 caa:	48 17       	cp	r20, r24
 cac:	59 07       	cpc	r21, r25
 cae:	c0 f0       	brcs	.+48     	; 0xce0 <malloc+0x5c>
 cb0:	48 17       	cp	r20, r24
 cb2:	59 07       	cpc	r21, r25
 cb4:	61 f4       	brne	.+24     	; 0xcce <malloc+0x4a>
 cb6:	82 81       	ldd	r24, Z+2	; 0x02
 cb8:	93 81       	ldd	r25, Z+3	; 0x03
 cba:	20 97       	sbiw	r28, 0x00	; 0
 cbc:	19 f0       	breq	.+6      	; 0xcc4 <malloc+0x40>
 cbe:	9b 83       	std	Y+3, r25	; 0x03
 cc0:	8a 83       	std	Y+2, r24	; 0x02
 cc2:	2b c0       	rjmp	.+86     	; 0xd1a <malloc+0x96>
 cc4:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <__flp+0x1>
 cc8:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__flp>
 ccc:	26 c0       	rjmp	.+76     	; 0xd1a <malloc+0x96>
 cce:	21 15       	cp	r18, r1
 cd0:	31 05       	cpc	r19, r1
 cd2:	19 f0       	breq	.+6      	; 0xcda <malloc+0x56>
 cd4:	42 17       	cp	r20, r18
 cd6:	53 07       	cpc	r21, r19
 cd8:	18 f4       	brcc	.+6      	; 0xce0 <malloc+0x5c>
 cda:	9a 01       	movw	r18, r20
 cdc:	be 01       	movw	r22, r28
 cde:	df 01       	movw	r26, r30
 ce0:	ef 01       	movw	r28, r30
 ce2:	02 80       	ldd	r0, Z+2	; 0x02
 ce4:	f3 81       	ldd	r31, Z+3	; 0x03
 ce6:	e0 2d       	mov	r30, r0
 ce8:	dc cf       	rjmp	.-72     	; 0xca2 <malloc+0x1e>
 cea:	21 15       	cp	r18, r1
 cec:	31 05       	cpc	r19, r1
 cee:	09 f1       	breq	.+66     	; 0xd32 <malloc+0xae>
 cf0:	28 1b       	sub	r18, r24
 cf2:	39 0b       	sbc	r19, r25
 cf4:	24 30       	cpi	r18, 0x04	; 4
 cf6:	31 05       	cpc	r19, r1
 cf8:	90 f4       	brcc	.+36     	; 0xd1e <malloc+0x9a>
 cfa:	12 96       	adiw	r26, 0x02	; 2
 cfc:	8d 91       	ld	r24, X+
 cfe:	9c 91       	ld	r25, X
 d00:	13 97       	sbiw	r26, 0x03	; 3
 d02:	61 15       	cp	r22, r1
 d04:	71 05       	cpc	r23, r1
 d06:	21 f0       	breq	.+8      	; 0xd10 <malloc+0x8c>
 d08:	fb 01       	movw	r30, r22
 d0a:	93 83       	std	Z+3, r25	; 0x03
 d0c:	82 83       	std	Z+2, r24	; 0x02
 d0e:	04 c0       	rjmp	.+8      	; 0xd18 <malloc+0x94>
 d10:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <__flp+0x1>
 d14:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__flp>
 d18:	fd 01       	movw	r30, r26
 d1a:	32 96       	adiw	r30, 0x02	; 2
 d1c:	44 c0       	rjmp	.+136    	; 0xda6 <malloc+0x122>
 d1e:	fd 01       	movw	r30, r26
 d20:	e2 0f       	add	r30, r18
 d22:	f3 1f       	adc	r31, r19
 d24:	81 93       	st	Z+, r24
 d26:	91 93       	st	Z+, r25
 d28:	22 50       	subi	r18, 0x02	; 2
 d2a:	31 09       	sbc	r19, r1
 d2c:	2d 93       	st	X+, r18
 d2e:	3c 93       	st	X, r19
 d30:	3a c0       	rjmp	.+116    	; 0xda6 <malloc+0x122>
 d32:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__brkval>
 d36:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <__brkval+0x1>
 d3a:	23 2b       	or	r18, r19
 d3c:	41 f4       	brne	.+16     	; 0xd4e <malloc+0xca>
 d3e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 d42:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 d46:	30 93 30 02 	sts	0x0230, r19	; 0x800230 <__brkval+0x1>
 d4a:	20 93 2f 02 	sts	0x022F, r18	; 0x80022f <__brkval>
 d4e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 d52:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 d56:	21 15       	cp	r18, r1
 d58:	31 05       	cpc	r19, r1
 d5a:	41 f4       	brne	.+16     	; 0xd6c <malloc+0xe8>
 d5c:	2d b7       	in	r18, 0x3d	; 61
 d5e:	3e b7       	in	r19, 0x3e	; 62
 d60:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 d64:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 d68:	24 1b       	sub	r18, r20
 d6a:	35 0b       	sbc	r19, r21
 d6c:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <__brkval>
 d70:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <__brkval+0x1>
 d74:	e2 17       	cp	r30, r18
 d76:	f3 07       	cpc	r31, r19
 d78:	a0 f4       	brcc	.+40     	; 0xda2 <malloc+0x11e>
 d7a:	2e 1b       	sub	r18, r30
 d7c:	3f 0b       	sbc	r19, r31
 d7e:	28 17       	cp	r18, r24
 d80:	39 07       	cpc	r19, r25
 d82:	78 f0       	brcs	.+30     	; 0xda2 <malloc+0x11e>
 d84:	ac 01       	movw	r20, r24
 d86:	4e 5f       	subi	r20, 0xFE	; 254
 d88:	5f 4f       	sbci	r21, 0xFF	; 255
 d8a:	24 17       	cp	r18, r20
 d8c:	35 07       	cpc	r19, r21
 d8e:	48 f0       	brcs	.+18     	; 0xda2 <malloc+0x11e>
 d90:	4e 0f       	add	r20, r30
 d92:	5f 1f       	adc	r21, r31
 d94:	50 93 30 02 	sts	0x0230, r21	; 0x800230 <__brkval+0x1>
 d98:	40 93 2f 02 	sts	0x022F, r20	; 0x80022f <__brkval>
 d9c:	81 93       	st	Z+, r24
 d9e:	91 93       	st	Z+, r25
 da0:	02 c0       	rjmp	.+4      	; 0xda6 <malloc+0x122>
 da2:	e0 e0       	ldi	r30, 0x00	; 0
 da4:	f0 e0       	ldi	r31, 0x00	; 0
 da6:	cf 01       	movw	r24, r30
 da8:	df 91       	pop	r29
 daa:	cf 91       	pop	r28
 dac:	08 95       	ret

00000dae <free>:
 dae:	0f 93       	push	r16
 db0:	1f 93       	push	r17
 db2:	cf 93       	push	r28
 db4:	df 93       	push	r29
 db6:	00 97       	sbiw	r24, 0x00	; 0
 db8:	09 f4       	brne	.+2      	; 0xdbc <free+0xe>
 dba:	8c c0       	rjmp	.+280    	; 0xed4 <free+0x126>
 dbc:	fc 01       	movw	r30, r24
 dbe:	32 97       	sbiw	r30, 0x02	; 2
 dc0:	13 82       	std	Z+3, r1	; 0x03
 dc2:	12 82       	std	Z+2, r1	; 0x02
 dc4:	00 91 31 02 	lds	r16, 0x0231	; 0x800231 <__flp>
 dc8:	10 91 32 02 	lds	r17, 0x0232	; 0x800232 <__flp+0x1>
 dcc:	01 15       	cp	r16, r1
 dce:	11 05       	cpc	r17, r1
 dd0:	81 f4       	brne	.+32     	; 0xdf2 <free+0x44>
 dd2:	20 81       	ld	r18, Z
 dd4:	31 81       	ldd	r19, Z+1	; 0x01
 dd6:	82 0f       	add	r24, r18
 dd8:	93 1f       	adc	r25, r19
 dda:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__brkval>
 dde:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <__brkval+0x1>
 de2:	28 17       	cp	r18, r24
 de4:	39 07       	cpc	r19, r25
 de6:	79 f5       	brne	.+94     	; 0xe46 <free+0x98>
 de8:	f0 93 30 02 	sts	0x0230, r31	; 0x800230 <__brkval+0x1>
 dec:	e0 93 2f 02 	sts	0x022F, r30	; 0x80022f <__brkval>
 df0:	71 c0       	rjmp	.+226    	; 0xed4 <free+0x126>
 df2:	d8 01       	movw	r26, r16
 df4:	40 e0       	ldi	r20, 0x00	; 0
 df6:	50 e0       	ldi	r21, 0x00	; 0
 df8:	ae 17       	cp	r26, r30
 dfa:	bf 07       	cpc	r27, r31
 dfc:	50 f4       	brcc	.+20     	; 0xe12 <free+0x64>
 dfe:	12 96       	adiw	r26, 0x02	; 2
 e00:	2d 91       	ld	r18, X+
 e02:	3c 91       	ld	r19, X
 e04:	13 97       	sbiw	r26, 0x03	; 3
 e06:	ad 01       	movw	r20, r26
 e08:	21 15       	cp	r18, r1
 e0a:	31 05       	cpc	r19, r1
 e0c:	09 f1       	breq	.+66     	; 0xe50 <free+0xa2>
 e0e:	d9 01       	movw	r26, r18
 e10:	f3 cf       	rjmp	.-26     	; 0xdf8 <free+0x4a>
 e12:	9d 01       	movw	r18, r26
 e14:	da 01       	movw	r26, r20
 e16:	33 83       	std	Z+3, r19	; 0x03
 e18:	22 83       	std	Z+2, r18	; 0x02
 e1a:	60 81       	ld	r22, Z
 e1c:	71 81       	ldd	r23, Z+1	; 0x01
 e1e:	86 0f       	add	r24, r22
 e20:	97 1f       	adc	r25, r23
 e22:	82 17       	cp	r24, r18
 e24:	93 07       	cpc	r25, r19
 e26:	69 f4       	brne	.+26     	; 0xe42 <free+0x94>
 e28:	ec 01       	movw	r28, r24
 e2a:	28 81       	ld	r18, Y
 e2c:	39 81       	ldd	r19, Y+1	; 0x01
 e2e:	26 0f       	add	r18, r22
 e30:	37 1f       	adc	r19, r23
 e32:	2e 5f       	subi	r18, 0xFE	; 254
 e34:	3f 4f       	sbci	r19, 0xFF	; 255
 e36:	31 83       	std	Z+1, r19	; 0x01
 e38:	20 83       	st	Z, r18
 e3a:	8a 81       	ldd	r24, Y+2	; 0x02
 e3c:	9b 81       	ldd	r25, Y+3	; 0x03
 e3e:	93 83       	std	Z+3, r25	; 0x03
 e40:	82 83       	std	Z+2, r24	; 0x02
 e42:	45 2b       	or	r20, r21
 e44:	29 f4       	brne	.+10     	; 0xe50 <free+0xa2>
 e46:	f0 93 32 02 	sts	0x0232, r31	; 0x800232 <__flp+0x1>
 e4a:	e0 93 31 02 	sts	0x0231, r30	; 0x800231 <__flp>
 e4e:	42 c0       	rjmp	.+132    	; 0xed4 <free+0x126>
 e50:	13 96       	adiw	r26, 0x03	; 3
 e52:	fc 93       	st	X, r31
 e54:	ee 93       	st	-X, r30
 e56:	12 97       	sbiw	r26, 0x02	; 2
 e58:	ed 01       	movw	r28, r26
 e5a:	49 91       	ld	r20, Y+
 e5c:	59 91       	ld	r21, Y+
 e5e:	9e 01       	movw	r18, r28
 e60:	24 0f       	add	r18, r20
 e62:	35 1f       	adc	r19, r21
 e64:	e2 17       	cp	r30, r18
 e66:	f3 07       	cpc	r31, r19
 e68:	71 f4       	brne	.+28     	; 0xe86 <free+0xd8>
 e6a:	80 81       	ld	r24, Z
 e6c:	91 81       	ldd	r25, Z+1	; 0x01
 e6e:	84 0f       	add	r24, r20
 e70:	95 1f       	adc	r25, r21
 e72:	02 96       	adiw	r24, 0x02	; 2
 e74:	11 96       	adiw	r26, 0x01	; 1
 e76:	9c 93       	st	X, r25
 e78:	8e 93       	st	-X, r24
 e7a:	82 81       	ldd	r24, Z+2	; 0x02
 e7c:	93 81       	ldd	r25, Z+3	; 0x03
 e7e:	13 96       	adiw	r26, 0x03	; 3
 e80:	9c 93       	st	X, r25
 e82:	8e 93       	st	-X, r24
 e84:	12 97       	sbiw	r26, 0x02	; 2
 e86:	e0 e0       	ldi	r30, 0x00	; 0
 e88:	f0 e0       	ldi	r31, 0x00	; 0
 e8a:	d8 01       	movw	r26, r16
 e8c:	12 96       	adiw	r26, 0x02	; 2
 e8e:	8d 91       	ld	r24, X+
 e90:	9c 91       	ld	r25, X
 e92:	13 97       	sbiw	r26, 0x03	; 3
 e94:	00 97       	sbiw	r24, 0x00	; 0
 e96:	19 f0       	breq	.+6      	; 0xe9e <free+0xf0>
 e98:	f8 01       	movw	r30, r16
 e9a:	8c 01       	movw	r16, r24
 e9c:	f6 cf       	rjmp	.-20     	; 0xe8a <free+0xdc>
 e9e:	8d 91       	ld	r24, X+
 ea0:	9c 91       	ld	r25, X
 ea2:	98 01       	movw	r18, r16
 ea4:	2e 5f       	subi	r18, 0xFE	; 254
 ea6:	3f 4f       	sbci	r19, 0xFF	; 255
 ea8:	82 0f       	add	r24, r18
 eaa:	93 1f       	adc	r25, r19
 eac:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <__brkval>
 eb0:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <__brkval+0x1>
 eb4:	28 17       	cp	r18, r24
 eb6:	39 07       	cpc	r19, r25
 eb8:	69 f4       	brne	.+26     	; 0xed4 <free+0x126>
 eba:	30 97       	sbiw	r30, 0x00	; 0
 ebc:	29 f4       	brne	.+10     	; 0xec8 <free+0x11a>
 ebe:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__flp+0x1>
 ec2:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <__flp>
 ec6:	02 c0       	rjmp	.+4      	; 0xecc <free+0x11e>
 ec8:	13 82       	std	Z+3, r1	; 0x03
 eca:	12 82       	std	Z+2, r1	; 0x02
 ecc:	10 93 30 02 	sts	0x0230, r17	; 0x800230 <__brkval+0x1>
 ed0:	00 93 2f 02 	sts	0x022F, r16	; 0x80022f <__brkval>
 ed4:	df 91       	pop	r29
 ed6:	cf 91       	pop	r28
 ed8:	1f 91       	pop	r17
 eda:	0f 91       	pop	r16
 edc:	08 95       	ret

00000ede <_exit>:
 ede:	f8 94       	cli

00000ee0 <__stop_program>:
 ee0:	ff cf       	rjmp	.-2      	; 0xee0 <__stop_program>
