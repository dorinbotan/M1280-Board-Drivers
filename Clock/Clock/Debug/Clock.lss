
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  00000a0c  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  0080021c  0080021c  00000abc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000230d  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001503  00000000  00000000  00003011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e88  00000000  00000000  00004514  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  0000539c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c8  00000000  00000000  000058a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000127b  00000000  00000000  00006270  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000074eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__vector_23>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c3       	rjmp	.+1622   	; 0x6bc <__vector_25>
  66:	00 00       	nop
  68:	54 c3       	rjmp	.+1704   	; 0x712 <__vector_26>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	f9 c1       	rjmp	.+1010   	; 0x490 <__vector_39>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ec e0       	ldi	r30, 0x0C	; 12
  f8:	fa e0       	ldi	r31, 0x0A	; 10
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	ac 31       	cpi	r26, 0x1C	; 28
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	23 e0       	ldi	r18, 0x03	; 3
 10c:	ac e1       	ldi	r26, 0x1C	; 28
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a2 33       	cpi	r26, 0x32	; 50
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	4f d1       	rcall	.+670    	; 0x3ba <main>
 11c:	75 c4       	rjmp	.+2282   	; 0xa08 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <_display_init>:
	}
}

void _display_init()
{
	DDRB |= _BV(DDB3);
 120:	23 9a       	sbi	0x04, 3	; 4
	DDRK |= _BV(DDK3);
 122:	e7 e0       	ldi	r30, 0x07	; 7
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	80 81       	ld	r24, Z
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	80 83       	st	Z, r24
	DDRL |= _BV(DDL3) | _BV(DDL2) | _BV(DDL1) | _BV(DDL0);
 12c:	ea e0       	ldi	r30, 0x0A	; 10
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	80 81       	ld	r24, Z
 132:	8f 60       	ori	r24, 0x0F	; 15
 134:	80 83       	st	Z, r24

	PORTB |= _BV(PB3);
 136:	2b 9a       	sbi	0x05, 3	; 5
	// Timer
	TCCR0B |= _BV(CS01) | _BV(CS00);
 138:	85 b5       	in	r24, 0x25	; 37
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(TOIE0);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 144:	08 95       	ret

00000146 <_trigger_display>:
}

void _trigger_display()
{
	CLEAR_BIT(PORTL, DISPLAY[current]);
 146:	ab e0       	ldi	r26, 0x0B	; 11
 148:	b1 e0       	ldi	r27, 0x01	; 1
 14a:	3c 91       	ld	r19, X
 14c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__data_end>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ec 5e       	subi	r30, 0xEC	; 236
 158:	fd 4f       	sbci	r31, 0xFD	; 253
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	ac 01       	movw	r20, r24
 160:	00 80       	ld	r0, Z
 162:	02 c0       	rjmp	.+4      	; 0x168 <_trigger_display+0x22>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <_trigger_display+0x1e>
 16c:	24 2f       	mov	r18, r20
 16e:	20 95       	com	r18
 170:	23 23       	and	r18, r19
 172:	2c 93       	st	X, r18
	CLOCK_PIN(PORTK, PK3);
 174:	e8 e0       	ldi	r30, 0x08	; 8
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	20 81       	ld	r18, Z
 17a:	28 60       	ori	r18, 0x08	; 8
 17c:	20 83       	st	Z, r18
 17e:	20 81       	ld	r18, Z
 180:	27 7f       	andi	r18, 0xF7	; 247
 182:	20 83       	st	Z, r18
	SET_BIT(PORTL, current);
 184:	2c 91       	ld	r18, X
 186:	00 90 1c 02 	lds	r0, 0x021C	; 0x80021c <__data_end>
 18a:	02 c0       	rjmp	.+4      	; 0x190 <_trigger_display+0x4a>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <_trigger_display+0x46>
 194:	82 2b       	or	r24, r18
 196:	8c 93       	st	X, r24

	current++;
 198:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
 19c:	8f 5f       	subi	r24, 0xFF	; 255
	current %= 4;
 19e:	83 70       	andi	r24, 0x03	; 3
 1a0:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__data_end>
 1a4:	08 95       	ret

000001a6 <__vector_23>:
uint8_t init = 0;
int8_t value_by_digits[4] = { -1, -1, -1, -1 };
uint8_t current = 0;

ISR(TIMER0_OVF_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	0b b6       	in	r0, 0x3b	; 59
 1b2:	0f 92       	push	r0
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	cf 93       	push	r28
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	uint8_t value_digit = value_by_digits[current];
 1ce:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__data_end>
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	ea 5f       	subi	r30, 0xFA	; 250
 1d6:	fd 4f       	sbci	r31, 0xFD	; 253
 1d8:	c0 81       	ld	r28, Z
	if(value_digit != -1) {
		spi_init(SPI_MODE_MASTER,
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	36 d1       	rcall	.+620    	; 0x450 <spi_init>
				 SPI_DATA_ORDER_LSB_FIRST,
				 SPI_CLOCK_POLARITY_LOW,
				 SPI_CLOCK_PHASE_SAMPLE_LEADING);
		spi_send_byte(value_digit);
 1e4:	8c 2f       	mov	r24, r28
 1e6:	4a d1       	rcall	.+660    	; 0x47c <spi_send_byte>
		_trigger_display();
 1e8:	ae df       	rcall	.-164    	; 0x146 <_trigger_display>
	}
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	cf 91       	pop	r28
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0b be       	out	0x3b, r0	; 59
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <display_value>:
	current++;
	current %= 4;
}

void display_value(unsigned short value)
{
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
	if(!init) {
 21c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <init>
 220:	81 11       	cpse	r24, r1
 222:	04 c0       	rjmp	.+8      	; 0x22c <display_value+0x1a>
		_display_init();
 224:	7d df       	rcall	.-262    	; 0x120 <_display_init>
		init = 1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <init>
	}

	unsigned short n = value;
 22c:	9e 01       	movw	r18, r28
	uint8_t count = 0;
 22e:	e0 e0       	ldi	r30, 0x00	; 0
	while(n != 0 || count == 0)	{
 230:	0b c0       	rjmp	.+22     	; 0x248 <display_value+0x36>
		n /= 10;
 232:	ad ec       	ldi	r26, 0xCD	; 205
 234:	bc ec       	ldi	r27, 0xCC	; 204
 236:	ac d2       	rcall	.+1368   	; 0x790 <__umulhisi3>
 238:	9c 01       	movw	r18, r24
 23a:	36 95       	lsr	r19
 23c:	27 95       	ror	r18
 23e:	36 95       	lsr	r19
 240:	27 95       	ror	r18
 242:	36 95       	lsr	r19
 244:	27 95       	ror	r18
		++count;
 246:	ef 5f       	subi	r30, 0xFF	; 255
		init = 1;
	}

	unsigned short n = value;
	uint8_t count = 0;
	while(n != 0 || count == 0)	{
 248:	21 15       	cp	r18, r1
 24a:	31 05       	cpc	r19, r1
 24c:	91 f7       	brne	.-28     	; 0x232 <display_value+0x20>
 24e:	ee 23       	and	r30, r30
 250:	81 f3       	breq	.-32     	; 0x232 <display_value+0x20>
 252:	06 e0       	ldi	r16, 0x06	; 6
 254:	12 e0       	ldi	r17, 0x02	; 2
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	50 e0       	ldi	r21, 0x00	; 0
		n /= 10;
		++count;
	}

	for(int i = 0; i < 4; i++) {
		if(i < count)
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	4e 17       	cp	r20, r30
 25e:	5f 07       	cpc	r21, r31
 260:	f4 f4       	brge	.+60     	; 0x29e <display_value+0x8c>
			value_by_digits[i] = DIGIT[value % 10];
 262:	9e 01       	movw	r18, r28
 264:	ad ec       	ldi	r26, 0xCD	; 205
 266:	bc ec       	ldi	r27, 0xCC	; 204
 268:	93 d2       	rcall	.+1318   	; 0x790 <__umulhisi3>
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	9c 01       	movw	r18, r24
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	82 0f       	add	r24, r18
 28a:	93 1f       	adc	r25, r19
 28c:	de 01       	movw	r26, r28
 28e:	a8 1b       	sub	r26, r24
 290:	b9 0b       	sbc	r27, r25
 292:	a6 5f       	subi	r26, 0xF6	; 246
 294:	bd 4f       	sbci	r27, 0xFD	; 253
 296:	8c 91       	ld	r24, X
 298:	d8 01       	movw	r26, r16
 29a:	8c 93       	st	X, r24
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <display_value+0x90>
		else
			value_by_digits[i] = 0;
 29e:	d8 01       	movw	r26, r16
 2a0:	1c 92       	st	X, r1
		value /= 10;
 2a2:	9e 01       	movw	r18, r28
 2a4:	ad ec       	ldi	r26, 0xCD	; 205
 2a6:	bc ec       	ldi	r27, 0xCC	; 204
 2a8:	73 d2       	rcall	.+1254   	; 0x790 <__umulhisi3>
 2aa:	ec 01       	movw	r28, r24
 2ac:	d6 95       	lsr	r29
 2ae:	c7 95       	ror	r28
 2b0:	d6 95       	lsr	r29
 2b2:	c7 95       	ror	r28
 2b4:	d6 95       	lsr	r29
 2b6:	c7 95       	ror	r28
	while(n != 0 || count == 0)	{
		n /= 10;
		++count;
	}

	for(int i = 0; i < 4; i++) {
 2b8:	4f 5f       	subi	r20, 0xFF	; 255
 2ba:	5f 4f       	sbci	r21, 0xFF	; 255
 2bc:	0f 5f       	subi	r16, 0xFF	; 255
 2be:	1f 4f       	sbci	r17, 0xFF	; 255
 2c0:	44 30       	cpi	r20, 0x04	; 4
 2c2:	51 05       	cpc	r21, r1
 2c4:	59 f6       	brne	.-106    	; 0x25c <display_value+0x4a>
			value_by_digits[i] = DIGIT[value % 10];
		else
			value_by_digits[i] = 0;
		value /= 10;
	}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <toBcd>:
		callback(0);
	} else {
		uint8_t data[3] = { toBcd(d), toBcd(m), toBcd(y) };
		twi_write(DEVICE_ID, 0x04, data, 3, callback);
	}
}
 2d0:	9d ec       	ldi	r25, 0xCD	; 205
 2d2:	89 9f       	mul	r24, r25
 2d4:	91 2d       	mov	r25, r1
 2d6:	11 24       	eor	r1, r1
 2d8:	96 95       	lsr	r25
 2da:	96 95       	lsr	r25
 2dc:	96 95       	lsr	r25
 2de:	39 2f       	mov	r19, r25
 2e0:	33 0f       	add	r19, r19
 2e2:	23 2f       	mov	r18, r19
 2e4:	22 0f       	add	r18, r18
 2e6:	22 0f       	add	r18, r18
 2e8:	23 0f       	add	r18, r19
 2ea:	82 1b       	sub	r24, r18
 2ec:	20 e1       	ldi	r18, 0x10	; 16
 2ee:	92 9f       	mul	r25, r18
 2f0:	80 0d       	add	r24, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	08 95       	ret

000002f6 <rtc_setTime>:
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	00 d0       	rcall	.+0      	; 0x304 <rtc_setTime+0xe>
 304:	1f 92       	push	r1
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	e8 2e       	mov	r14, r24
 30c:	f6 2e       	mov	r15, r22
 30e:	89 01       	movw	r16, r18
 310:	4c 33       	cpi	r20, 0x3C	; 60
 312:	30 f4       	brcc	.+12     	; 0x320 <rtc_setTime+0x2a>
 314:	8b e3       	ldi	r24, 0x3B	; 59
 316:	86 17       	cp	r24, r22
 318:	18 f0       	brcs	.+6      	; 0x320 <rtc_setTime+0x2a>
 31a:	e7 e1       	ldi	r30, 0x17	; 23
 31c:	ee 15       	cp	r30, r14
 31e:	28 f4       	brcc	.+10     	; 0x32a <rtc_setTime+0x34>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	f8 01       	movw	r30, r16
 326:	09 95       	icall
 328:	11 c0       	rjmp	.+34     	; 0x34c <rtc_setTime+0x56>
 32a:	84 2f       	mov	r24, r20
 32c:	d1 df       	rcall	.-94     	; 0x2d0 <toBcd>
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	8f 2d       	mov	r24, r15
 332:	ce df       	rcall	.-100    	; 0x2d0 <toBcd>
 334:	8a 83       	std	Y+2, r24	; 0x02
 336:	8e 2d       	mov	r24, r14
 338:	cb df       	rcall	.-106    	; 0x2d0 <toBcd>
 33a:	8b 83       	std	Y+3, r24	; 0x03
 33c:	23 e0       	ldi	r18, 0x03	; 3
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	ae 01       	movw	r20, r28
 342:	4f 5f       	subi	r20, 0xFF	; 255
 344:	5f 4f       	sbci	r21, 0xFF	; 255
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	88 e6       	ldi	r24, 0x68	; 104
 34a:	73 d1       	rcall	.+742    	; 0x632 <twi_write>
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	08 95       	ret

00000360 <rtc_getTime>:

void rtc_getTime(void (*callback)(uint8_t *))
{
	twi_read(DEVICE_ID, 0x00, 3, callback);
 360:	9c 01       	movw	r18, r24
 362:	43 e0       	ldi	r20, 0x03	; 3
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	88 e6       	ldi	r24, 0x68	; 104
 36a:	81 c1       	rjmp	.+770    	; 0x66e <twi_read>
 36c:	08 95       	ret

0000036e <a0>:
{
	status = 1;
	display_value(fromBcd(value[1]) * 100 + fromBcd(value[0]));
}

void a0(uint8_t *value) { status = 1; }
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <status>
 374:	08 95       	ret

00000376 <fromBcd>:
//#include "USART/usart.h"
//#include "USART/usart0.h"

uint8_t fromBcd(uint8_t value)
{
	return (value >> 4) * 10 + (value & 0x0F);
 376:	98 2f       	mov	r25, r24
 378:	92 95       	swap	r25
 37a:	9f 70       	andi	r25, 0x0F	; 15
 37c:	99 0f       	add	r25, r25
 37e:	29 2f       	mov	r18, r25
 380:	22 0f       	add	r18, r18
 382:	22 0f       	add	r18, r18
 384:	92 0f       	add	r25, r18
 386:	8f 70       	andi	r24, 0x0F	; 15
}
 388:	89 0f       	add	r24, r25
 38a:	08 95       	ret

0000038c <a1>:

uint8_t status = 0;

void a1(uint8_t *value)
{
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
	status = 1;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <status>
	display_value(fromBcd(value[1]) * 100 + fromBcd(value[0]));
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	ec df       	rcall	.-40     	; 0x376 <fromBcd>
 39e:	18 2f       	mov	r17, r24
 3a0:	88 81       	ld	r24, Y
 3a2:	e9 df       	rcall	.-46     	; 0x376 <fromBcd>
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	24 e6       	ldi	r18, 0x64	; 100
 3a8:	12 9f       	mul	r17, r18
 3aa:	80 0d       	add	r24, r0
 3ac:	91 1d       	adc	r25, r1
 3ae:	11 24       	eor	r1, r1
 3b0:	30 df       	rcall	.-416    	; 0x212 <display_value>
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	08 95       	ret

000003ba <main>:

void a0(uint8_t *value) { status = 1; }

int main(void)
{
	sei();
 3ba:	78 94       	sei
//	char buf;
//	usart0_init();
//	usart0_send_arr("\r\n", 2);

//	twi_init(100000L);
	rtc_setTime(10, 21, 0, a0);
 3bc:	27 eb       	ldi	r18, 0xB7	; 183
 3be:	31 e0       	ldi	r19, 0x01	; 1
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	65 e1       	ldi	r22, 0x15	; 21
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	97 df       	rcall	.-210    	; 0x2f6 <rtc_setTime>

	while(1)
	{
//		if(usart0_recv_dequeue(&buf))
//			usart0_send(buf);
		if(status)
 3c8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <status>
 3cc:	88 23       	and	r24, r24
 3ce:	e1 f3       	breq	.-8      	; 0x3c8 <main+0xe>
		{
			status = 0;
 3d0:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <status>
			rtc_getTime(a1);
 3d4:	86 ec       	ldi	r24, 0xC6	; 198
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	c3 df       	rcall	.-122    	; 0x360 <rtc_getTime>
 3da:	f6 cf       	rjmp	.-20     	; 0x3c8 <main+0xe>

000003dc <ring_buffer_queue>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
  ring_buffer_size_t i;
  for(i = 0; i < size; i++)
    ring_buffer_queue(buffer, data[i]);
}
 3dc:	fc 01       	movw	r30, r24
 3de:	ef 57       	subi	r30, 0x7F	; 127
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	20 81       	ld	r18, Z
 3e4:	42 2f       	mov	r20, r18
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	30 81       	ld	r19, Z
 3ec:	fa 01       	movw	r30, r20
 3ee:	e3 1b       	sub	r30, r19
 3f0:	f1 09       	sbc	r31, r1
 3f2:	ef 77       	andi	r30, 0x7F	; 127
 3f4:	ff 27       	eor	r31, r31
 3f6:	ef 37       	cpi	r30, 0x7F	; 127
 3f8:	f1 05       	cpc	r31, r1
 3fa:	31 f4       	brne	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	fc 01       	movw	r30, r24
 3fe:	e0 58       	subi	r30, 0x80	; 128
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	3f 5f       	subi	r19, 0xFF	; 255
 404:	3f 77       	andi	r19, 0x7F	; 127
 406:	30 83       	st	Z, r19
 408:	fc 01       	movw	r30, r24
 40a:	e4 0f       	add	r30, r20
 40c:	f5 1f       	adc	r31, r21
 40e:	60 83       	st	Z, r22
 410:	fc 01       	movw	r30, r24
 412:	ef 57       	subi	r30, 0x7F	; 127
 414:	ff 4f       	sbci	r31, 0xFF	; 255
 416:	2f 5f       	subi	r18, 0xFF	; 255
 418:	2f 77       	andi	r18, 0x7F	; 127
 41a:	20 83       	st	Z, r18
 41c:	08 95       	ret

0000041e <ring_buffer_dequeue>:
uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data);
uint8_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len);
uint8_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index);

inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
 41e:	fc 01       	movw	r30, r24
 420:	e0 58       	subi	r30, 0x80	; 128
 422:	ff 4f       	sbci	r31, 0xFF	; 255
 424:	20 81       	ld	r18, Z
 426:	31 96       	adiw	r30, 0x01	; 1

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer))
 428:	30 81       	ld	r19, Z
 42a:	32 17       	cp	r19, r18
 42c:	79 f0       	breq	.+30     	; 0x44c <ring_buffer_dequeue+0x2e>
    return 0;
  
  *data = buffer->buffer[buffer->tail_index];
 42e:	fc 01       	movw	r30, r24
 430:	e2 0f       	add	r30, r18
 432:	f1 1d       	adc	r31, r1
 434:	20 81       	ld	r18, Z
 436:	fb 01       	movw	r30, r22
 438:	20 83       	st	Z, r18
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 43a:	fc 01       	movw	r30, r24
 43c:	e0 58       	subi	r30, 0x80	; 128
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	80 81       	ld	r24, Z
 442:	8f 5f       	subi	r24, 0xFF	; 255
 444:	8f 77       	andi	r24, 0x7F	; 127
 446:	80 83       	st	Z, r24
  return 1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	08 95       	ret
    ring_buffer_queue(buffer, data[i]);
}

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer))
    return 0;
 44c:	80 e0       	ldi	r24, 0x00	; 0
  
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
 44e:	08 95       	ret

00000450 <spi_init>:
			  uint8_t clock_phase)
{
	uint8_t has_callback_function = 0;

	//			MOSI		SCK			SS
	DDRB |= _BV(DDB2) | _BV(DDB1) | _BV(DDB0);
 450:	94 b1       	in	r25, 0x04	; 4
 452:	97 60       	ori	r25, 0x07	; 7
 454:	94 b9       	out	0x04, r25	; 4
			(has_callback_function << SPIE) |
			_BV(SPE) |
			(data_order << DORD) |
			(mode << MSTR) |
			(clock_polarity << CPOL) |
			(clock_phase << CPHA) |
 456:	22 0f       	add	r18, r18
 458:	22 0f       	add	r18, r18
 45a:	23 64       	ori	r18, 0x43	; 67
	SPCR = (
			(has_callback_function << SPIE) |
			_BV(SPE) |
			(data_order << DORD) |
			(mode << MSTR) |
			(clock_polarity << CPOL) |
 45c:	44 0f       	add	r20, r20
 45e:	44 0f       	add	r20, r20
 460:	44 0f       	add	r20, r20
 462:	42 2b       	or	r20, r18

	SPCR = (
			(has_callback_function << SPIE) |
			_BV(SPE) |
			(data_order << DORD) |
			(mode << MSTR) |
 464:	20 e1       	ldi	r18, 0x10	; 16
 466:	62 9f       	mul	r22, r18
 468:	b0 01       	movw	r22, r0
 46a:	11 24       	eor	r1, r1
 46c:	64 2b       	or	r22, r20
	DDRB |= _BV(DDB2) | _BV(DDB1) | _BV(DDB0);

	SPCR = (
			(has_callback_function << SPIE) |
			_BV(SPE) |
			(data_order << DORD) |
 46e:	20 e2       	ldi	r18, 0x20	; 32
 470:	82 9f       	mul	r24, r18
 472:	c0 01       	movw	r24, r0
 474:	11 24       	eor	r1, r1
	uint8_t has_callback_function = 0;

	//			MOSI		SCK			SS
	DDRB |= _BV(DDB2) | _BV(DDB1) | _BV(DDB0);

	SPCR = (
 476:	68 2b       	or	r22, r24
 478:	6c bd       	out	0x2c, r22	; 44
 47a:	08 95       	ret

0000047c <spi_send_byte>:
}

uint8_t spi_send_byte(uint8_t value)
{
	uint8_t received_byte;
	uint8_t tmp = SREG;
 47c:	9f b7       	in	r25, 0x3f	; 63
	cli();
 47e:	f8 94       	cli

	SPDR = value;
 480:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & _BV(SPIF))){}
 482:	0d b4       	in	r0, 0x2d	; 45
 484:	07 fe       	sbrs	r0, 7
 486:	fd cf       	rjmp	.-6      	; 0x482 <spi_send_byte+0x6>

	received_byte = SPDR;
 488:	8e b5       	in	r24, 0x2e	; 46
	
	sei();
 48a:	78 94       	sei
	SREG = tmp;
 48c:	9f bf       	out	0x3f, r25	; 63
	return received_byte;
 48e:	08 95       	ret

00000490 <__vector_39>:
	// Set bit rate
	TWBR = (F_CPU / sclFrequency - 16) / 2;
	// Enable TWI and interrupt
	TWCR = (1 << TWEN) | (1 << TWIE);
	return TWBR;
}
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	0b b6       	in	r0, 0x3b	; 59
 49c:	0f 92       	push	r0
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
 4b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4ba:	88 7f       	andi	r24, 0xF8	; 248
 4bc:	88 31       	cpi	r24, 0x18	; 24
 4be:	09 f1       	breq	.+66     	; 0x502 <__vector_39+0x72>
 4c0:	28 f4       	brcc	.+10     	; 0x4cc <__vector_39+0x3c>
 4c2:	88 30       	cpi	r24, 0x08	; 8
 4c4:	61 f0       	breq	.+24     	; 0x4de <__vector_39+0x4e>
 4c6:	80 31       	cpi	r24, 0x10	; 16
 4c8:	99 f0       	breq	.+38     	; 0x4f0 <__vector_39+0x60>
 4ca:	a0 c0       	rjmp	.+320    	; 0x60c <__vector_39+0x17c>
 4cc:	80 34       	cpi	r24, 0x40	; 64
 4ce:	09 f1       	breq	.+66     	; 0x512 <__vector_39+0x82>
 4d0:	80 35       	cpi	r24, 0x50	; 80
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <__vector_39+0x46>
 4d4:	5c c0       	rjmp	.+184    	; 0x58e <__vector_39+0xfe>
 4d6:	88 32       	cpi	r24, 0x28	; 40
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_39+0x4c>
 4da:	98 c0       	rjmp	.+304    	; 0x60c <__vector_39+0x17c>
 4dc:	1e c0       	rjmp	.+60     	; 0x51a <__vector_39+0x8a>
 4de:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <deviceId>
 4e2:	88 0f       	add	r24, r24
 4e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 4e8:	85 e8       	ldi	r24, 0x85	; 133
 4ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4ee:	8e c0       	rjmp	.+284    	; 0x60c <__vector_39+0x17c>
 4f0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <deviceId>
 4f4:	88 0f       	add	r24, r24
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 4fc:	85 e8       	ldi	r24, 0x85	; 133
 4fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 502:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <reg>
 506:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 50a:	85 e8       	ldi	r24, 0x85	; 133
 50c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 510:	7d c0       	rjmp	.+250    	; 0x60c <__vector_39+0x17c>
 512:	85 ec       	ldi	r24, 0xC5	; 197
 514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 518:	79 c0       	rjmp	.+242    	; 0x60c <__vector_39+0x17c>
 51a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mode>
 51e:	81 11       	cpse	r24, r1
 520:	32 c0       	rjmp	.+100    	; 0x586 <__vector_39+0xf6>
 522:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <TXIndex>
 526:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <TXIndex+0x1>
 52a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <TXSize>
 52e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <TXSize+0x1>
 532:	28 17       	cp	r18, r24
 534:	39 07       	cpc	r19, r25
 536:	cc f4       	brge	.+50     	; 0x56a <__vector_39+0xda>
 538:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <TXBuffer>
 53c:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <TXBuffer+0x1>
 540:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <TXIndex>
 544:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <TXIndex+0x1>
 548:	ac 01       	movw	r20, r24
 54a:	4f 5f       	subi	r20, 0xFF	; 255
 54c:	5f 4f       	sbci	r21, 0xFF	; 255
 54e:	50 93 21 02 	sts	0x0221, r21	; 0x800221 <TXIndex+0x1>
 552:	40 93 20 02 	sts	0x0220, r20	; 0x800220 <TXIndex>
 556:	f9 01       	movw	r30, r18
 558:	e8 0f       	add	r30, r24
 55a:	f9 1f       	adc	r31, r25
 55c:	80 81       	ld	r24, Z
 55e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 562:	85 e8       	ldi	r24, 0x85	; 133
 564:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 568:	51 c0       	rjmp	.+162    	; 0x60c <__vector_39+0x17c>
 56a:	85 e9       	ldi	r24, 0x95	; 149
 56c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 570:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <callbackFunction>
 574:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <callbackFunction+0x1>
 578:	30 97       	sbiw	r30, 0x00	; 0
 57a:	09 f4       	brne	.+2      	; 0x57e <__vector_39+0xee>
 57c:	47 c0       	rjmp	.+142    	; 0x60c <__vector_39+0x17c>
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	09 95       	icall
 584:	43 c0       	rjmp	.+134    	; 0x60c <__vector_39+0x17c>
 586:	85 ea       	ldi	r24, 0xA5	; 165
 588:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 58c:	3f c0       	rjmp	.+126    	; 0x60c <__vector_39+0x17c>
 58e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <TXBuffer>
 592:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <TXBuffer+0x1>
 596:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <TXIndex>
 59a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <TXIndex+0x1>
 59e:	9c 01       	movw	r18, r24
 5a0:	2f 5f       	subi	r18, 0xFF	; 255
 5a2:	3f 4f       	sbci	r19, 0xFF	; 255
 5a4:	30 93 21 02 	sts	0x0221, r19	; 0x800221 <TXIndex+0x1>
 5a8:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <TXIndex>
 5ac:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 5b0:	fa 01       	movw	r30, r20
 5b2:	e8 0f       	add	r30, r24
 5b4:	f9 1f       	adc	r31, r25
 5b6:	20 83       	st	Z, r18
 5b8:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <TXIndex>
 5bc:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <TXIndex+0x1>
 5c0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <TXSize>
 5c4:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <TXSize+0x1>
 5c8:	28 17       	cp	r18, r24
 5ca:	39 07       	cpc	r19, r25
 5cc:	24 f4       	brge	.+8      	; 0x5d6 <__vector_39+0x146>
 5ce:	85 ec       	ldi	r24, 0xC5	; 197
 5d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5d4:	1b c0       	rjmp	.+54     	; 0x60c <__vector_39+0x17c>
 5d6:	85 e8       	ldi	r24, 0x85	; 133
 5d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5dc:	ec eb       	ldi	r30, 0xBC	; 188
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	88 23       	and	r24, r24
 5e4:	ec f7       	brge	.-6      	; 0x5e0 <__vector_39+0x150>
 5e6:	85 e9       	ldi	r24, 0x95	; 149
 5e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5ec:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <callbackFunction>
 5f0:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <callbackFunction+0x1>
 5f4:	30 97       	sbiw	r30, 0x00	; 0
 5f6:	29 f0       	breq	.+10     	; 0x602 <__vector_39+0x172>
 5f8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <TXBuffer>
 5fc:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <TXBuffer+0x1>
 600:	09 95       	icall
 602:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <TXBuffer>
 606:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <TXBuffer+0x1>
 60a:	66 d1       	rcall	.+716    	; 0x8d8 <free>
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	bf 91       	pop	r27
 612:	af 91       	pop	r26
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	7f 91       	pop	r23
 61a:	6f 91       	pop	r22
 61c:	5f 91       	pop	r21
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0b be       	out	0x3b, r0	; 59
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <twi_write>:

void twi_write(uint8_t device, uint8_t address, uint8_t *data, int len, void (*callback)(uint8_t*))
{
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
	//usart0_send_arr(" W-", 3);
	mode = Sending;
 636:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <mode>
	deviceId = device;
 63a:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <deviceId>
	reg = address;
 63e:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <reg>
	TXBuffer = data;
 642:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <TXBuffer+0x1>
 646:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <TXBuffer>
	TXIndex = 0;
 64a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <TXIndex+0x1>
 64e:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <TXIndex>
	TXSize = len;
 652:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <TXSize+0x1>
 656:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <TXSize>
	callbackFunction = callback;
 65a:	10 93 29 02 	sts	0x0229, r17	; 0x800229 <callbackFunction+0x1>
 65e:	00 93 28 02 	sts	0x0228, r16	; 0x800228 <callbackFunction>

	TWI_SendStart();
 662:	85 ea       	ldi	r24, 0xA5	; 165
 664:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	08 95       	ret

0000066e <twi_read>:

void twi_read(uint8_t device, uint8_t address, int len, void (*callback)(uint8_t*))
{
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	ea 01       	movw	r28, r20
 678:	89 01       	movw	r16, r18
	//usart0_send_arr(" R-", 3);
	mode = Receiving;
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <mode>
	deviceId = device;
 680:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <deviceId>
	reg = address;
 684:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <reg>
	TXBuffer = (uint8_t*)malloc(len);
 688:	ca 01       	movw	r24, r20
 68a:	91 d0       	rcall	.+290    	; 0x7ae <malloc>
 68c:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <TXBuffer+0x1>
 690:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <TXBuffer>
	TXIndex = 0;
 694:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <TXIndex+0x1>
 698:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <TXIndex>
	TXSize = len;
 69c:	d0 93 23 02 	sts	0x0223, r29	; 0x800223 <TXSize+0x1>
 6a0:	c0 93 22 02 	sts	0x0222, r28	; 0x800222 <TXSize>
	callbackFunction = callback;
 6a4:	10 93 29 02 	sts	0x0229, r17	; 0x800229 <callbackFunction+0x1>
 6a8:	00 93 28 02 	sts	0x0228, r16	; 0x800228 <callbackFunction>

	TWI_SendStart();
 6ac:	85 ea       	ldi	r24, 0xA5	; 165
 6ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	08 95       	ret

000006bc <__vector_25>:
      .usart_send_arr = usart0_send_arr
    };
  return &descriptor;
}

ISR(USART0_RX_vect) {
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	0b b6       	in	r0, 0x3b	; 59
 6c8:	0f 92       	push	r0
 6ca:	2f 93       	push	r18
 6cc:	3f 93       	push	r19
 6ce:	4f 93       	push	r20
 6d0:	5f 93       	push	r21
 6d2:	6f 93       	push	r22
 6d4:	7f 93       	push	r23
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	af 93       	push	r26
 6dc:	bf 93       	push	r27
 6de:	ef 93       	push	r30
 6e0:	ff 93       	push	r31
  char received_data = UDR0;
 6e2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ring_buffer_queue(&usart0_recv_ring_buf, received_data);
 6e6:	8a e2       	ldi	r24, 0x2A	; 42
 6e8:	92 e0       	ldi	r25, 0x02	; 2
 6ea:	78 de       	rcall	.-784    	; 0x3dc <ring_buffer_queue>
}
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	bf 91       	pop	r27
 6f2:	af 91       	pop	r26
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	7f 91       	pop	r23
 6fa:	6f 91       	pop	r22
 6fc:	5f 91       	pop	r21
 6fe:	4f 91       	pop	r20
 700:	3f 91       	pop	r19
 702:	2f 91       	pop	r18
 704:	0f 90       	pop	r0
 706:	0b be       	out	0x3b, r0	; 59
 708:	0f 90       	pop	r0
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	0f 90       	pop	r0
 70e:	1f 90       	pop	r1
 710:	18 95       	reti

00000712 <__vector_26>:

ISR(USART0_UDRE_vect) {
 712:	1f 92       	push	r1
 714:	0f 92       	push	r0
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	0f 92       	push	r0
 71a:	11 24       	eor	r1, r1
 71c:	0b b6       	in	r0, 0x3b	; 59
 71e:	0f 92       	push	r0
 720:	2f 93       	push	r18
 722:	3f 93       	push	r19
 724:	4f 93       	push	r20
 726:	5f 93       	push	r21
 728:	6f 93       	push	r22
 72a:	7f 93       	push	r23
 72c:	8f 93       	push	r24
 72e:	9f 93       	push	r25
 730:	af 93       	push	r26
 732:	bf 93       	push	r27
 734:	ef 93       	push	r30
 736:	ff 93       	push	r31
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	1f 92       	push	r1
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
  char data;
  if(ring_buffer_dequeue(&usart0_send_ring_buf, &data) > 0)
 742:	be 01       	movw	r22, r28
 744:	6f 5f       	subi	r22, 0xFF	; 255
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	8c ea       	ldi	r24, 0xAC	; 172
 74a:	92 e0       	ldi	r25, 0x02	; 2
 74c:	68 de       	rcall	.-816    	; 0x41e <ring_buffer_dequeue>
 74e:	88 23       	and	r24, r24
 750:	21 f0       	breq	.+8      	; 0x75a <__vector_26+0x48>
    UDR0 = data;
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 758:	05 c0       	rjmp	.+10     	; 0x764 <__vector_26+0x52>
  else
    UCSR0B &= ~(1 << UDRIE0);
 75a:	e1 ec       	ldi	r30, 0xC1	; 193
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	8f 7d       	andi	r24, 0xDF	; 223
 762:	80 83       	st	Z, r24
}
 764:	0f 90       	pop	r0
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0b be       	out	0x3b, r0	; 59
 786:	0f 90       	pop	r0
 788:	0f be       	out	0x3f, r0	; 63
 78a:	0f 90       	pop	r0
 78c:	1f 90       	pop	r1
 78e:	18 95       	reti

00000790 <__umulhisi3>:
 790:	a2 9f       	mul	r26, r18
 792:	b0 01       	movw	r22, r0
 794:	b3 9f       	mul	r27, r19
 796:	c0 01       	movw	r24, r0
 798:	a3 9f       	mul	r26, r19
 79a:	70 0d       	add	r23, r0
 79c:	81 1d       	adc	r24, r1
 79e:	11 24       	eor	r1, r1
 7a0:	91 1d       	adc	r25, r1
 7a2:	b2 9f       	mul	r27, r18
 7a4:	70 0d       	add	r23, r0
 7a6:	81 1d       	adc	r24, r1
 7a8:	11 24       	eor	r1, r1
 7aa:	91 1d       	adc	r25, r1
 7ac:	08 95       	ret

000007ae <malloc>:
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	82 30       	cpi	r24, 0x02	; 2
 7b4:	91 05       	cpc	r25, r1
 7b6:	10 f4       	brcc	.+4      	; 0x7bc <malloc+0xe>
 7b8:	82 e0       	ldi	r24, 0x02	; 2
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <__flp>
 7c0:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <__flp+0x1>
 7c4:	20 e0       	ldi	r18, 0x00	; 0
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	c0 e0       	ldi	r28, 0x00	; 0
 7ca:	d0 e0       	ldi	r29, 0x00	; 0
 7cc:	30 97       	sbiw	r30, 0x00	; 0
 7ce:	11 f1       	breq	.+68     	; 0x814 <malloc+0x66>
 7d0:	40 81       	ld	r20, Z
 7d2:	51 81       	ldd	r21, Z+1	; 0x01
 7d4:	48 17       	cp	r20, r24
 7d6:	59 07       	cpc	r21, r25
 7d8:	c0 f0       	brcs	.+48     	; 0x80a <malloc+0x5c>
 7da:	48 17       	cp	r20, r24
 7dc:	59 07       	cpc	r21, r25
 7de:	61 f4       	brne	.+24     	; 0x7f8 <malloc+0x4a>
 7e0:	82 81       	ldd	r24, Z+2	; 0x02
 7e2:	93 81       	ldd	r25, Z+3	; 0x03
 7e4:	20 97       	sbiw	r28, 0x00	; 0
 7e6:	19 f0       	breq	.+6      	; 0x7ee <malloc+0x40>
 7e8:	9b 83       	std	Y+3, r25	; 0x03
 7ea:	8a 83       	std	Y+2, r24	; 0x02
 7ec:	2b c0       	rjmp	.+86     	; 0x844 <malloc+0x96>
 7ee:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <__flp+0x1>
 7f2:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <__flp>
 7f6:	26 c0       	rjmp	.+76     	; 0x844 <malloc+0x96>
 7f8:	21 15       	cp	r18, r1
 7fa:	31 05       	cpc	r19, r1
 7fc:	19 f0       	breq	.+6      	; 0x804 <malloc+0x56>
 7fe:	42 17       	cp	r20, r18
 800:	53 07       	cpc	r21, r19
 802:	18 f4       	brcc	.+6      	; 0x80a <malloc+0x5c>
 804:	9a 01       	movw	r18, r20
 806:	be 01       	movw	r22, r28
 808:	df 01       	movw	r26, r30
 80a:	ef 01       	movw	r28, r30
 80c:	02 80       	ldd	r0, Z+2	; 0x02
 80e:	f3 81       	ldd	r31, Z+3	; 0x03
 810:	e0 2d       	mov	r30, r0
 812:	dc cf       	rjmp	.-72     	; 0x7cc <malloc+0x1e>
 814:	21 15       	cp	r18, r1
 816:	31 05       	cpc	r19, r1
 818:	09 f1       	breq	.+66     	; 0x85c <malloc+0xae>
 81a:	28 1b       	sub	r18, r24
 81c:	39 0b       	sbc	r19, r25
 81e:	24 30       	cpi	r18, 0x04	; 4
 820:	31 05       	cpc	r19, r1
 822:	90 f4       	brcc	.+36     	; 0x848 <malloc+0x9a>
 824:	12 96       	adiw	r26, 0x02	; 2
 826:	8d 91       	ld	r24, X+
 828:	9c 91       	ld	r25, X
 82a:	13 97       	sbiw	r26, 0x03	; 3
 82c:	61 15       	cp	r22, r1
 82e:	71 05       	cpc	r23, r1
 830:	21 f0       	breq	.+8      	; 0x83a <malloc+0x8c>
 832:	fb 01       	movw	r30, r22
 834:	93 83       	std	Z+3, r25	; 0x03
 836:	82 83       	std	Z+2, r24	; 0x02
 838:	04 c0       	rjmp	.+8      	; 0x842 <malloc+0x94>
 83a:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <__flp+0x1>
 83e:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <__flp>
 842:	fd 01       	movw	r30, r26
 844:	32 96       	adiw	r30, 0x02	; 2
 846:	44 c0       	rjmp	.+136    	; 0x8d0 <malloc+0x122>
 848:	fd 01       	movw	r30, r26
 84a:	e2 0f       	add	r30, r18
 84c:	f3 1f       	adc	r31, r19
 84e:	81 93       	st	Z+, r24
 850:	91 93       	st	Z+, r25
 852:	22 50       	subi	r18, 0x02	; 2
 854:	31 09       	sbc	r19, r1
 856:	2d 93       	st	X+, r18
 858:	3c 93       	st	X, r19
 85a:	3a c0       	rjmp	.+116    	; 0x8d0 <malloc+0x122>
 85c:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <__brkval>
 860:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <__brkval+0x1>
 864:	23 2b       	or	r18, r19
 866:	41 f4       	brne	.+16     	; 0x878 <malloc+0xca>
 868:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 86c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 870:	30 93 2f 03 	sts	0x032F, r19	; 0x80032f <__brkval+0x1>
 874:	20 93 2e 03 	sts	0x032E, r18	; 0x80032e <__brkval>
 878:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 87c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 880:	21 15       	cp	r18, r1
 882:	31 05       	cpc	r19, r1
 884:	41 f4       	brne	.+16     	; 0x896 <malloc+0xe8>
 886:	2d b7       	in	r18, 0x3d	; 61
 888:	3e b7       	in	r19, 0x3e	; 62
 88a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 88e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 892:	24 1b       	sub	r18, r20
 894:	35 0b       	sbc	r19, r21
 896:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <__brkval>
 89a:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <__brkval+0x1>
 89e:	e2 17       	cp	r30, r18
 8a0:	f3 07       	cpc	r31, r19
 8a2:	a0 f4       	brcc	.+40     	; 0x8cc <malloc+0x11e>
 8a4:	2e 1b       	sub	r18, r30
 8a6:	3f 0b       	sbc	r19, r31
 8a8:	28 17       	cp	r18, r24
 8aa:	39 07       	cpc	r19, r25
 8ac:	78 f0       	brcs	.+30     	; 0x8cc <malloc+0x11e>
 8ae:	ac 01       	movw	r20, r24
 8b0:	4e 5f       	subi	r20, 0xFE	; 254
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	24 17       	cp	r18, r20
 8b6:	35 07       	cpc	r19, r21
 8b8:	48 f0       	brcs	.+18     	; 0x8cc <malloc+0x11e>
 8ba:	4e 0f       	add	r20, r30
 8bc:	5f 1f       	adc	r21, r31
 8be:	50 93 2f 03 	sts	0x032F, r21	; 0x80032f <__brkval+0x1>
 8c2:	40 93 2e 03 	sts	0x032E, r20	; 0x80032e <__brkval>
 8c6:	81 93       	st	Z+, r24
 8c8:	91 93       	st	Z+, r25
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <malloc+0x122>
 8cc:	e0 e0       	ldi	r30, 0x00	; 0
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	cf 01       	movw	r24, r30
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	08 95       	ret

000008d8 <free>:
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <free+0xe>
 8e4:	8c c0       	rjmp	.+280    	; 0x9fe <free+0x126>
 8e6:	fc 01       	movw	r30, r24
 8e8:	32 97       	sbiw	r30, 0x02	; 2
 8ea:	13 82       	std	Z+3, r1	; 0x03
 8ec:	12 82       	std	Z+2, r1	; 0x02
 8ee:	00 91 30 03 	lds	r16, 0x0330	; 0x800330 <__flp>
 8f2:	10 91 31 03 	lds	r17, 0x0331	; 0x800331 <__flp+0x1>
 8f6:	01 15       	cp	r16, r1
 8f8:	11 05       	cpc	r17, r1
 8fa:	81 f4       	brne	.+32     	; 0x91c <free+0x44>
 8fc:	20 81       	ld	r18, Z
 8fe:	31 81       	ldd	r19, Z+1	; 0x01
 900:	82 0f       	add	r24, r18
 902:	93 1f       	adc	r25, r19
 904:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <__brkval>
 908:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <__brkval+0x1>
 90c:	28 17       	cp	r18, r24
 90e:	39 07       	cpc	r19, r25
 910:	79 f5       	brne	.+94     	; 0x970 <free+0x98>
 912:	f0 93 2f 03 	sts	0x032F, r31	; 0x80032f <__brkval+0x1>
 916:	e0 93 2e 03 	sts	0x032E, r30	; 0x80032e <__brkval>
 91a:	71 c0       	rjmp	.+226    	; 0x9fe <free+0x126>
 91c:	d8 01       	movw	r26, r16
 91e:	40 e0       	ldi	r20, 0x00	; 0
 920:	50 e0       	ldi	r21, 0x00	; 0
 922:	ae 17       	cp	r26, r30
 924:	bf 07       	cpc	r27, r31
 926:	50 f4       	brcc	.+20     	; 0x93c <free+0x64>
 928:	12 96       	adiw	r26, 0x02	; 2
 92a:	2d 91       	ld	r18, X+
 92c:	3c 91       	ld	r19, X
 92e:	13 97       	sbiw	r26, 0x03	; 3
 930:	ad 01       	movw	r20, r26
 932:	21 15       	cp	r18, r1
 934:	31 05       	cpc	r19, r1
 936:	09 f1       	breq	.+66     	; 0x97a <free+0xa2>
 938:	d9 01       	movw	r26, r18
 93a:	f3 cf       	rjmp	.-26     	; 0x922 <free+0x4a>
 93c:	9d 01       	movw	r18, r26
 93e:	da 01       	movw	r26, r20
 940:	33 83       	std	Z+3, r19	; 0x03
 942:	22 83       	std	Z+2, r18	; 0x02
 944:	60 81       	ld	r22, Z
 946:	71 81       	ldd	r23, Z+1	; 0x01
 948:	86 0f       	add	r24, r22
 94a:	97 1f       	adc	r25, r23
 94c:	82 17       	cp	r24, r18
 94e:	93 07       	cpc	r25, r19
 950:	69 f4       	brne	.+26     	; 0x96c <free+0x94>
 952:	ec 01       	movw	r28, r24
 954:	28 81       	ld	r18, Y
 956:	39 81       	ldd	r19, Y+1	; 0x01
 958:	26 0f       	add	r18, r22
 95a:	37 1f       	adc	r19, r23
 95c:	2e 5f       	subi	r18, 0xFE	; 254
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	31 83       	std	Z+1, r19	; 0x01
 962:	20 83       	st	Z, r18
 964:	8a 81       	ldd	r24, Y+2	; 0x02
 966:	9b 81       	ldd	r25, Y+3	; 0x03
 968:	93 83       	std	Z+3, r25	; 0x03
 96a:	82 83       	std	Z+2, r24	; 0x02
 96c:	45 2b       	or	r20, r21
 96e:	29 f4       	brne	.+10     	; 0x97a <free+0xa2>
 970:	f0 93 31 03 	sts	0x0331, r31	; 0x800331 <__flp+0x1>
 974:	e0 93 30 03 	sts	0x0330, r30	; 0x800330 <__flp>
 978:	42 c0       	rjmp	.+132    	; 0x9fe <free+0x126>
 97a:	13 96       	adiw	r26, 0x03	; 3
 97c:	fc 93       	st	X, r31
 97e:	ee 93       	st	-X, r30
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	ed 01       	movw	r28, r26
 984:	49 91       	ld	r20, Y+
 986:	59 91       	ld	r21, Y+
 988:	9e 01       	movw	r18, r28
 98a:	24 0f       	add	r18, r20
 98c:	35 1f       	adc	r19, r21
 98e:	e2 17       	cp	r30, r18
 990:	f3 07       	cpc	r31, r19
 992:	71 f4       	brne	.+28     	; 0x9b0 <free+0xd8>
 994:	80 81       	ld	r24, Z
 996:	91 81       	ldd	r25, Z+1	; 0x01
 998:	84 0f       	add	r24, r20
 99a:	95 1f       	adc	r25, r21
 99c:	02 96       	adiw	r24, 0x02	; 2
 99e:	11 96       	adiw	r26, 0x01	; 1
 9a0:	9c 93       	st	X, r25
 9a2:	8e 93       	st	-X, r24
 9a4:	82 81       	ldd	r24, Z+2	; 0x02
 9a6:	93 81       	ldd	r25, Z+3	; 0x03
 9a8:	13 96       	adiw	r26, 0x03	; 3
 9aa:	9c 93       	st	X, r25
 9ac:	8e 93       	st	-X, r24
 9ae:	12 97       	sbiw	r26, 0x02	; 2
 9b0:	e0 e0       	ldi	r30, 0x00	; 0
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	d8 01       	movw	r26, r16
 9b6:	12 96       	adiw	r26, 0x02	; 2
 9b8:	8d 91       	ld	r24, X+
 9ba:	9c 91       	ld	r25, X
 9bc:	13 97       	sbiw	r26, 0x03	; 3
 9be:	00 97       	sbiw	r24, 0x00	; 0
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <free+0xf0>
 9c2:	f8 01       	movw	r30, r16
 9c4:	8c 01       	movw	r16, r24
 9c6:	f6 cf       	rjmp	.-20     	; 0x9b4 <free+0xdc>
 9c8:	8d 91       	ld	r24, X+
 9ca:	9c 91       	ld	r25, X
 9cc:	98 01       	movw	r18, r16
 9ce:	2e 5f       	subi	r18, 0xFE	; 254
 9d0:	3f 4f       	sbci	r19, 0xFF	; 255
 9d2:	82 0f       	add	r24, r18
 9d4:	93 1f       	adc	r25, r19
 9d6:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <__brkval>
 9da:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <__brkval+0x1>
 9de:	28 17       	cp	r18, r24
 9e0:	39 07       	cpc	r19, r25
 9e2:	69 f4       	brne	.+26     	; 0x9fe <free+0x126>
 9e4:	30 97       	sbiw	r30, 0x00	; 0
 9e6:	29 f4       	brne	.+10     	; 0x9f2 <free+0x11a>
 9e8:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <__flp+0x1>
 9ec:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <__flp>
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <free+0x11e>
 9f2:	13 82       	std	Z+3, r1	; 0x03
 9f4:	12 82       	std	Z+2, r1	; 0x02
 9f6:	10 93 2f 03 	sts	0x032F, r17	; 0x80032f <__brkval+0x1>
 9fa:	00 93 2e 03 	sts	0x032E, r16	; 0x80032e <__brkval>
 9fe:	df 91       	pop	r29
 a00:	cf 91       	pop	r28
 a02:	1f 91       	pop	r17
 a04:	0f 91       	pop	r16
 a06:	08 95       	ret

00000a08 <_exit>:
 a08:	f8 94       	cli

00000a0a <__stop_program>:
 a0a:	ff cf       	rjmp	.-2      	; 0xa0a <__stop_program>
